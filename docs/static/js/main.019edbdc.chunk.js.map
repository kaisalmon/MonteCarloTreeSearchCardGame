{"version":3,"sources":["webpack:///./src/client/worker/worker.ts?3305","cardgame/Components/TextTemplate.ts","cardgame/Card.ts","cardgame/Data/ExampleDecks.ts","MCTS/mcts.ts","cardgame/Components/Effects/RandomTransferEffect.ts","cardgame/Components/Effects/ListEffect.ts","cardgame/Components/Effects/ChangePlayerValue.ts","cardgame/Components/Effects/ConditionalEffect.ts","cardgame/Components/GameConditions/PlayerLessThanCondition.ts","cardgame/Components/Abilities/OnEventAbility.ts","cardgame/Components/ChoiceActions/ChooseAPlayer.ts","cardgame/Components/Effects/MovePlayerEffect.ts","cardgame/Components/Effects/MoveDemographicEffect.ts","cardgame/Components/ChoiceActions/ChooseAnExtreme.ts","cardgame/Components/setup.ts","cardgame/CardGame.ts","client/ChoiceArrow.tsx","client/DelayHover.tsx","client/CardDisplay.tsx","client/assets/bg.png","client/TransitionProps.tsx","client/DemographicDisplay.tsx","client/CardPile.tsx","client/GameBoard.tsx","client/worker/index.ts","App.tsx","reportWebVitals.ts","index.tsx","client/worker/worker.ts"],"names":["module","exports","Worker","ResolveConstant","constructor","value","this","resolveValue","state","ctx","game","Effect","applyEffectNoThrow","executionContext","applyEffect","e","Fizzle","isFizzle","returnState","TextTemplate","slot","template","factory","regex","slots","pattern","toLowerCase","replace","RegExp","matchAll","map","match","templates","push","_text","text","trim","candidates","filter","length","Error","errors","results","matches","subTexts","splice","args","i","parse","x","errorMessages","_","uniq","message","join","result","Eff","ChoiceAction","Player","N","Cond","Ability","Demos","Position","super","Card","cardNumber","preEffect","playerKey","player","hand","isFirstTurn","indexOf","popularity","postEffect","cardPlayedThisTurn","endRoundAfterThisTurn","discardPile","play","activePlayer","afterPreEffect","afterEffect","EffectCard","getName","name","getText","effect","ChoiceActionCard","choiceAction","step","cardBeingPlayed","c","hasOwnProperty","ItemCard","ability","board","cardText","1","2","3","4","5","6","7","8","9","10","11","13","14","15","16","choiceText","30","31","32","33","parseCards","texts","chain","flatMap","Object","entries","keyBy","getExampleDeck","values","some","arr","specificCardNumber","parseInt","promptSync","GameStatus","RandomTransferEffect","target","from","to","n","s","transfer","targetKey","fromPile","toPile","drawIndex","Math","floor","random","DrawCardEffect","processEvent","cardNumbers","xor","ListEffect","a","b","afterA","ChangePlayerValue","amount","field","ConditionalEffect","eff","condition","PlayerLessThanCondition","mapping","OnEventAbility","eventType","abilityType","trigger","eventParams","triggerCtx","lastPlayer","FilteredOnEventAbility","ChooseAPlayer","move","choice","getChoices","type","MovePlayerEffect","position","shift","MovePlayerTowardsPointEffect","point","stepSize","pos","deltaX","deltaY","y","deltaMag","sqrt","clampedStepSize","min","clamp","max","shiftTowardsPoint","MoveDemographicEffect","demos","indexes","demographics","demo","includes","MoveDemographicTowardsPointEffect","resolveAllDemographics","resolveFollowers","playerTarget","getDemographicVote","ResolvePlayerPosition","EXTREMES","hearts","clubs","diamonds","spades","EXTREMES_BY_ID","ID_BY_EXTREME","ChooseAnExtreme","lastExtreme","ContextualPosition","hasTarget","resolveActivePlayer","resolveOpponent","resolvePlayerContextually","numberToWords","toWords","reversedConditionalFactory","cond","setupConditional","forEach","extreme","CardGame","applyMoveChain","Array","isArray","reduce","applyMove","cardIndex","deckOne","deckTwo","keys","parseFloat","onTurnEnd","applyCardPlay","applyCardDiscard","applyChoiceMove","getSensibleMoves","roundsUntilElection","votes","getVotes","getCardMoves","bPop","playerOne","rPop","playerTwo","bdistSquared","pow","rScore","bScore","identity","countBy","getStatus","IN_PLAY","WIN","LOSE","DRAW","getValidMoves","undefined","card","is","getDiscardMoves","newGame","newPlayer","preGame","fill","deck","blueDrawCardsEffect","STARTING_HAND_SIZE","redDrawCardsEffect","p1Draw","print","console","log","chalk","white","JSON","stringify","blue","red","randomizeHiddenInfo","opponentKey","playMove","roundEnding","afterTurnEndState","onRoundEnd","getHeuristic","bluePoints","redPoints","baseState","isItemCard","isOnEventAbility","listener","updatePlayer","newState","endRoundIfNoCardPlayedThisTurn","drawEffect","getActiveActionChoice","ARROW_STYLE","boxSizing","background","width","zIndex","left","top","marginBottom","transformOrigin","display","flexDirection","alignItems","cursor","pointerEvents","HEAD_STYLE","borderLeft","borderRight","borderTop","ChoiceArrow","height","setHeight","React","useState","theta","setTheta","element","useRef","dynamicStyle","transform","useEffect","event","current","domRect","getBoundingClientRect","clientX","clientY","atan2","window","addEventListener","removeEventListener","ref","style","DelayHover","props","tId","setTId","hovered","setHovered","onMouseOver","setTimeout","handleHoverTrigger","delay","onMouseOut","clearTimeout","handleHoverCancel","children","CARD_STYLE","backgroundColor","borderWidth","borderColor","borderStyle","fontSize","borderRadius","marginLeft","marginTop","marginRight","transition","overflow","CARD_TITLE_STYLE","fontWeight","BEING_PLAYED_CARD_STYLE","color","CAN_BE_DISCADED_STYLE","CAN_BE_PLAYED_STYLE","MOVE_DOWN_STYLE","MOVE_UP_STYLE","HIDDEN_STYLING","VANISHED_STYLE","WRAPPER_STYLE","CardDisplay","hasAppearedOnBoard","setHasAppearedOnBoard","onBoard","beingPlayed","situationalStyle","canBeDiscarded","canBePlayed","positionStyling","isOpponent","hiddenStyling","isHidden","onClick","setPreview","TransitionProps","component","propList","rest","visibleProps","setVisibleProps","newVisibleProps","requiresUpdate","key","currentValue","diff","abs","newValue","COMPASS_STYLE","border","margin","PLAYER_STYLE","DEMOGRAPHIC_STYLE","VOTES_BAR_STYLE","coordsToTransform","shaders","Shaders","create","helloBlue","frag","GLSL","Background","blueX","redPop","redX","bluePop","blueY","redY","pblueX","predPop","predX","pbluePop","pblueY","predY","src","bg","mixBlendMode","shader","uniforms","AnimatedBackground","Component","render","VoteBars","redVotes","blueVotes","flexGrow","round","DemographicDisplay","gamestate","onChoiceClick","isChoosingPlayer","isChoosingExtreme","bluePlayer","className","redPlayer","justifyContent","previewState","opacity","vote","preview","ghostStyling","textAlign","PILE_STYLE","CARD_LIST_STYLE","maxHeight","overflowY","CardPile","label","cards","getArrowProps","getTooltipProps","setTooltipRef","setTriggerRef","visible","usePopperTooltip","interactive","delayHide","placeContent","ACTIVE_WRAPPER_STYLE","HAND_STYLE","minWidth","HEALTH_WRAPPER_STYLE","HEALTH_STYLE","bottom","PlayerDisplay","onCardClick","isActive","lastmove","cardsBeingPlayed","displayHand","sort","GameBoard","worker","App","setupEffects","useMemo","loadExampleDeck","combinedGameState","setCombinedGameState","status","mood","setMood","setPreviewState","isLoading","setIsLoading","nextTimeout","async","delay_time","lastMove","Promise","all","processData","canEndTurn","find","m","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","inst","wrap","f"],"mappings":"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","file":"static/js/main.019edbdc.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"ca560c3275e415b7e51b.worker.js\");\n};","import CardGame, {CardGameChoiceMove, CardGameMove, CardGameState} from \"../CardGame\";\r\nimport {Card, PlayerKey} from \"../Card\";\r\nimport _ from 'lodash'\r\nimport {EventParams, EventType} from \"./Abilities/OnEventAbility\";\r\n\r\ntype Component = ResolveSlot<any>\r\ntype GetSlot<T extends Component> = T extends ResolveSlot<infer R> ? R : any;\r\ntype Slot = 'Eff'|'Player'|'N'|'Cond'|'Ability'|'ChoiceAction'|'Demos'|'Position'\r\ntype ResolveSlot<SLOT extends Slot> = SLOT extends 'Eff' ? Effect\r\n                                    : SLOT extends 'Ability' ? Ability\r\n                                    : SLOT extends 'Player' ? PlayerTarget\r\n                                    : SLOT extends 'ChoiceAction' ? ChoiceAction\r\n                                    : SLOT extends 'Cond' ? Resolver<boolean>\r\n                                    : SLOT extends 'Demos' ? Resolver<number[]>\r\n                                    : SLOT extends 'Position' ? Resolver<{x:number, y:number}>\r\n                                    : SLOT extends 'N' ? number\r\n                                    : never;\r\n\r\n\r\nexport type ExecutionContext = {\r\n  playerKey: PlayerKey\r\n  lastPlayer?: PlayerKey;\r\n  lastExtreme?: {x:number, y:number}\r\n} & (EventContext<EventType> | {})\r\n\r\ntype EventContext<E extends EventType> = {\r\n    eventType: E,\r\n    eventParams:EventParams<E>\r\n}\r\n\r\nexport type Resolver<T> = {\r\n   resolveValue(state:CardGameState, ctx:ExecutionContext, game:CardGame):T;\r\n}\r\n\r\nexport class ResolveConstant<T>{\r\n  value:T;\r\n  constructor(value:T) {\r\n    this.value = value;\r\n  }\r\n    resolveValue(state:CardGameState, ctx:ExecutionContext, game:CardGame){\r\n      return this.value;\r\n    }\r\n}\r\n\r\nexport type PlayerTarget = Resolver<PlayerKey>\r\n\r\nexport interface Ability {\r\n  abilityType: string;\r\n}\r\n\r\nexport interface ChoiceAction {\r\n  getChoices(state:CardGameState, executionContext:ExecutionContext, game:CardGame):CardGameChoiceMove[];\r\n  applyEffect(move:CardGameChoiceMove, state:CardGameState, executionContext:ExecutionContext, game:CardGame):CardGameState;\r\n}\r\n\r\nexport abstract class Effect{\r\n  abstract applyEffect(state:CardGameState, executionContext:ExecutionContext, game:CardGame):CardGameState;\r\n  applyEffectNoThrow(state:CardGameState, executionContext:ExecutionContext, game:CardGame):CardGameState{\r\n     try{\r\n        return this.applyEffect(state, executionContext, game);\r\n    }catch(e){\r\n        if(!Fizzle.isFizzle(e))throw e;\r\n        return e.returnState;\r\n    }\r\n  }\r\n}\r\n\r\nexport default class TextTemplate<T extends Component, ARGS extends Component[]=Component[]>{\r\n  template: string;\r\n  regex: RegExp;\r\n  slots: Slot[];\r\n  factory:(...args:ARGS)=>T;\r\n\r\n  static templates:{\r\n    [S in Slot]: TextTemplate<ResolveSlot<S>>[]\r\n  } = {\r\n    Eff: [],\r\n    Player: [],\r\n    N:[],\r\n    Cond:[],\r\n    ChoiceAction:[],\r\n    Ability:[],\r\n    Demos:[],\r\n    Position:[],\r\n  }\r\n\r\n  constructor(slot: GetSlot<T>, template:string, factory:(...args:ARGS)=>T){\r\n    this.template = template;\r\n    const pattern = template\r\n        .toLowerCase()\r\n        .replace(/%\\w+\\s+/g, '(.*\\\\s+|)?')\r\n        .replace(/%\\w+/g, '(.*|)?')\r\n    this.regex = new RegExp('^'+pattern+'$');\r\n    this.factory = factory;\r\n    this.slots = [...this.template.matchAll(/%(\\w+)/gi)].map(match=>match[1]) as Slot[]\r\n    TextTemplate.templates[slot].push(this as any);\r\n  }\r\n\r\n  static parse<SLOT extends Slot>(slot: SLOT, _text:string):ResolveSlot<SLOT>{\r\n    const text = (_text||\"\").trim()\r\n    const templates = TextTemplate.templates[slot] as TextTemplate<ResolveSlot<SLOT>>[];\r\n    const candidates = templates.filter((template:TextTemplate<Component>) => text.toLowerCase().match(template.regex));\r\n    if(candidates.length === 0) throw new Error(`Invalid text for slot ${slot}: ${text}`);\r\n    const errors:Error[] = [];\r\n    const results = candidates.map((template:TextTemplate<Component>)=>{\r\n      try{\r\n        const matches = text.toLowerCase().match(template.regex);\r\n        const subTexts = matches ? matches.splice(1) : [];\r\n        const args = template.slots.map((slot, i)=>{\r\n          return TextTemplate.parse(slot, subTexts[i])\r\n        })\r\n        return template.factory(...args as any) as unknown as ResolveSlot<SLOT>;\r\n      }catch(e){\r\n        errors.push(e);\r\n        return undefined;\r\n      }\r\n    }).filter(x=>x);\r\n    if(results.length === 0){\r\n      const errorMessages = _.uniq(errors.map(e=>e.message));\r\n      if(errorMessages.length > 1){\r\n        throw new Error(errorMessages.join(\"; \"));\r\n      }else{\r\n        throw errors[0];\r\n      }\r\n    }\r\n    // TODO: select by shortest depth\r\n    const [result] = results;\r\n    if(!result){\r\n      throw Error()\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static clear() {\r\n    this.templates = {\r\n      Eff: [],\r\n      ChoiceAction:[],\r\n      Player: [],\r\n      N:[],\r\n      Cond:[],\r\n      Ability:[],\r\n      Demos:[],\r\n      Position:[],\r\n    }\r\n  }\r\n}\r\n\r\nexport class Fizzle extends Error{\r\n  isFizzle = true\r\n  returnState: CardGameState;\r\n  constructor(returnState: CardGameState) {\r\n    super(\"Effect Fizzle!\");\r\n    this.returnState = returnState;\r\n  }\r\n  static isFizzle(e:any):e is Fizzle{\r\n    return e.isFizzle;\r\n  }\r\n}","import CardGame, {CardGameState} from \"./CardGame\";\r\nimport {Ability, ChoiceAction, Effect, Fizzle} from \"./Components/TextTemplate\";\r\n\r\nexport type PlayerKey = 'playerOne'|'playerTwo'\r\n\r\nexport abstract class Card{\r\n    cardNumber: number;\r\n    abstract getName():string;\r\n    abstract getText():string;\r\n    abstract applyEffect(state:CardGameState, playerKey:PlayerKey, game:CardGame):CardGameState;\r\n\r\n    constructor(cardNumber: number) {\r\n        this.cardNumber = cardNumber;\r\n    }\r\n\r\n\r\n    private preEffect(state:CardGameState, playerKey:PlayerKey):CardGameState{\r\n        const player = state[playerKey];\r\n        const hand = [...player.hand]\r\n        const {isFirstTurn} = state;\r\n        const cost = 0;\r\n        hand.splice(hand.indexOf(this.cardNumber), 1);\r\n        return {\r\n            ...state,\r\n            [playerKey]: {\r\n                ...player,\r\n                popularity: player.popularity - cost,\r\n                hand\r\n            }\r\n        }\r\n    }\r\n\r\n    protected postEffect(state:CardGameState, playerKey:PlayerKey):CardGameState{\r\n        return {\r\n            ...state,\r\n            cardPlayedThisTurn: true,\r\n            endRoundAfterThisTurn: false,\r\n            [playerKey]: {\r\n                ...state[playerKey],\r\n                discardPile: [this.cardNumber, ...state[playerKey].discardPile]\r\n            }\r\n        }\r\n    }\r\n\r\n    play(state:CardGameState, cardNumber:number, game:CardGame):CardGameState{\r\n        const playerKey = state.activePlayer  === 1 ? 'playerOne' : 'playerTwo';\r\n        try{\r\n            const afterPreEffect = this.preEffect(state,playerKey);\r\n            const afterEffect = this.applyEffect(afterPreEffect, playerKey, game);\r\n            return this.postEffect(afterEffect,playerKey);\r\n        }catch(e){\r\n            if(!Fizzle.isFizzle(e)) throw e;\r\n            return this.postEffect(e.returnState, playerKey)\r\n        }\r\n    }\r\n}\r\n\r\nexport class EffectCard extends Card{\r\n    effect: Effect;\r\n    name: string;\r\n    text: string;\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getText(): string {\r\n        return this.text;\r\n    }\r\n\r\n    constructor(effect:Effect, text:string, name:string, cardNumber:number) {\r\n        super(cardNumber);\r\n        this.effect = effect;\r\n        this.text = text;\r\n        this.name = name;\r\n    }\r\n    applyEffect(state: CardGameState, playerKey:PlayerKey, game:CardGame): CardGameState {\r\n        const ctx = {\r\n            playerKey\r\n        }\r\n        return this.effect.applyEffect(state, ctx, game)\r\n    }\r\n}\r\nexport class ChoiceActionCard extends Card{\r\n    choiceAction: ChoiceAction;\r\n    name: string;\r\n    text: string;\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getText(): string {\r\n        return this.text;\r\n    }\r\n    constructor(choiceAction:ChoiceAction, text:string, name:string,cardNumber:number) {\r\n        super(cardNumber);\r\n        this.choiceAction = choiceAction;\r\n        this.text = text;\r\n        this.name = name;\r\n    }\r\n    applyEffect(state: CardGameState, playerKey:PlayerKey, game:CardGame): CardGameState {\r\n        return {\r\n            ...state,\r\n            step:'choice',\r\n            cardBeingPlayed: this.cardNumber,\r\n        }\r\n    }\r\n    protected postEffect(state:CardGameState, playerKey:PlayerKey):CardGameState {\r\n        return state;\r\n    }\r\n    static is(c:Card): c is ChoiceActionCard{\r\n        if(!c) return false;\r\n        return (c as Record<string, any>).hasOwnProperty('choiceAction')\r\n    }\r\n}\r\n\r\nexport class ItemCard extends Card{\r\n    ability: Ability;\r\n    name: string;\r\n    text: string;\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getText(): string {\r\n        return this.text;\r\n    }\r\n    constructor(ability:Ability, text:string, name:string, cardNumber:number) {\r\n        super(cardNumber);\r\n        this.ability = ability;\r\n        this.text = text;\r\n        this.name = name;\r\n    }\r\n\r\n    applyEffect(state: CardGameState): CardGameState {\r\n        return state;\r\n    }\r\n\r\n    protected postEffect(state:CardGameState, playerKey:PlayerKey):CardGameState{\r\n        return {\r\n            ...state,\r\n            cardPlayedThisTurn: true,\r\n            endRoundAfterThisTurn: false,\r\n            [playerKey]: {\r\n                ...state[playerKey],\r\n                board: [this.cardNumber, ...state[playerKey].board]\r\n            }\r\n        }\r\n    }\r\n\r\n    static isItemCard(c:Card):c is ItemCard{\r\n        return (c as Object).hasOwnProperty('ability')\r\n    }\r\n}\r\n","import setup from '../Components/setup';\r\nimport {Card, ChoiceActionCard, EffectCard, ItemCard} from \"../Card\";\r\nimport TextTemplate from \"../Components/TextTemplate\";\r\nimport _ from 'lodash'\r\n\r\nconst cardText:Record<number, string>= {\r\n    1: 'All demographics shift towards the hearts extreme',\r\n    2: 'All demographics shift towards the diamonds extreme',\r\n    3: 'All demographics shift towards the clubs extreme',\r\n    4: 'All demographics shift towards the spades extreme',\r\n    5: 'You shift towards the hearts extreme. Gain one popularity',\r\n    6: 'You shift towards the spades extreme. Your opponent loses one popularity',\r\n    7: 'You shift towards the diamonds extreme. Draw a card',\r\n    8: 'You shift towards the clubs extreme. Your opponent discards a random card',\r\n    9: 'Gain two popularity',\r\n    10:'Lose one popularity, your followers shift towards you',\r\n    11:'gain one popularity, your followers shift away from you',\r\n    13: 'You shift towards the center',\r\n    14:'Your followers shift towards your opponent, then their followers shift towards you',\r\n    15:'Discard a random card, then shift towards your opponent',\r\n    16:'Shift away from your opponent, then you draw a card',\r\n};\r\n\r\n\r\nconst choiceText:Record<number, string>= {\r\n    30:'Choose a player. That player draws 2 cards and loses 2 popularity',\r\n    31:'Choose an extreme. All demographics shift towards that extreme',\r\n    32:'Choose an extreme. Shift towards that extreme',\r\n    33:'Choose an extreme. Gain one popularity and shift towards that extreme'\r\n};\r\n\r\n function getExampleDeck():Record<number, Card>{\r\n    if(Object.values(TextTemplate.templates).some(arr=>arr.length === 0)) {\r\n        throw new Error(\"Text Templates not setup\")\r\n    }\r\n   const effectCards = parseCards(cardText, (text,cardNumber,i)=>{\r\n        const effect = TextTemplate.parse('Eff', text);\r\n        const specificCardNumber = parseInt(cardNumber)+i/10;\r\n        return new EffectCard(effect, text, `Card #${cardNumber}`, specificCardNumber)\r\n   })\r\n    const choiceCards = parseCards(choiceText, (text,cardNumber,i)=>{\r\n        const choiceAction = TextTemplate.parse('ChoiceAction', text);\r\n        const specificCardNumber = parseInt(cardNumber)+i/10;\r\n        return new ChoiceActionCard(choiceAction, text, `Card #${cardNumber}`, specificCardNumber)\r\n   })\r\n\r\n    return {...effectCards, ...choiceCards}\r\n}\r\n\r\nfunction parseCards(texts:Record<number, string>, factory:(...args:any)=>Card):Record<number, Card>{\r\n     return _.chain([1,2,3])\r\n       .flatMap(i=> Object.entries(texts)\r\n           .map(([cardNumber,text])=>factory(text, cardNumber, i))\r\n       ).keyBy('cardNumber')\r\n       .value();\r\n}\r\n\r\nexport default getExampleDeck;","import _ from 'lodash';\r\nimport promptSync from 'prompt-sync'\r\nimport objectHash from 'object-hash'\r\nconst prompt = promptSync();\r\n\r\nexport enum GameStatus{\r\n    IN_PLAY='IN_PLAY',\r\n    LOSE='RED_WIN',\r\n    WIN='BLUE_WIN',\r\n    DRAW='DRAW'\r\n}\r\n\r\nconst getPlayerGoal = (player:1|2) => player === 1 ? GameStatus.WIN : GameStatus.LOSE;\r\n\r\ninterface GameState{\r\n    activePlayer: 1|2,\r\n}\r\n\r\nexport abstract class Game<STATE extends GameState, T>{\r\n    abstract newGame():STATE;\r\n    abstract getValidMoves(state:STATE):(T|T[])[];\r\n    abstract print(state:STATE):void;\r\n   abstract getSensibleMoves(state:STATE):(T|T[])[];\r\n     abstract randomizeHiddenInfo(state:STATE):STATE;\r\n     abstract applyMove(state:STATE, move:T):STATE;\r\n    abstract getStatus(state:STATE):GameStatus;\r\n\r\n    applyMoveChain(state: STATE, chain: T[]|T): STATE{\r\n        if(!Array.isArray(chain)) return this.applyMove(state, chain)\r\n        return  chain.reduce((s,move)=>this.applyMove(s, move), state);\r\n    }\r\n}\r\n\r\nexport interface Strategy<STATE extends GameState, T>{\r\n    mood: string;\r\n    pickMove(game:Game<STATE,T>, state:STATE):T|T[];\r\n}\r\n\r\nexport type StateFromGame<G> = G extends Game<infer U,any> ?  U : never;\r\nexport type MoveFromGame<G> = G extends Game<any, infer U> ?  U : never;\r\n\r\nexport function wilsonScore(successes:number, trails:number, z=1.96){\r\n    const failures = trails - successes;\r\n    const base = (successes + 0.5 * z * z)/(trails + z*z);\r\n    const plusMinus = z / (trails+z*z) * Math.sqrt(successes*failures/trails + z*z/4)\r\n    return {lowerBound:base-plusMinus, upperBound:base+plusMinus}\r\n}\r\n\r\nexport class RandomStrategy<STATE extends GameState, T> implements Strategy<STATE, T>{\r\n    mood = \"none\";\r\n    trueRandom: boolean;\r\n\r\n    constructor(trueRandom:boolean = false) {\r\n        this.trueRandom = trueRandom;\r\n    }\r\n\r\n    pickMove(game:Game<STATE, T>, state: STATE): T|T[] {\r\n        const sensibleMove = !this.trueRandom && _.sample(game.getSensibleMoves(state))\r\n        if (sensibleMove){\r\n            this.mood = \"Sensible\"\r\n            return sensibleMove;\r\n        }else{\r\n            this.mood = \"Not Sensible\"\r\n        }\r\n        const validMove = _.sample(game.getValidMoves(state))\r\n        if (validMove) {\r\n            return validMove;\r\n        }\r\n        throw new Error('No valid moves')\r\n    }\r\n}\r\n\r\nexport class InputStrategy<STATE extends GameState, T> implements Strategy<STATE, T> {\r\n    mood=\"player\"\r\n    transform:(str:string)=>T;\r\n    constructor(transform:(str:string)=>T) {\r\n        this.transform = transform;\r\n    }\r\n\r\n    pickMove(game: Game<STATE, T>, state: STATE): T {\r\n        game.print(state);\r\n        return this.transform(prompt(\"What's your move?\"))\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class MCTSStrategy<STATE extends GameState, T>implements Strategy<STATE, T>{\r\n    mood = \"waiting...\"\r\n    private simulationStrategy: Strategy<STATE, T>;\r\n    private samples:number;\r\n    private depth:number;\r\n    private inPlayHeuristic:(state:STATE)=>number;\r\n\r\n    usePruning:boolean=false;\r\n    z: number = 1.96;\r\n    pruningPeriod: number = 50;\r\n    useCache:boolean=false;\r\n\r\n    secondaryObjective?:(state:STATE)=>number;\r\n\r\n    private cache:Record<string,T|T[]> = {};\r\n\r\n    constructor(samples=60, depth=100, inPlayHeuristic: (state:STATE)=>number = ()=>0, simulationStrategy:Strategy<STATE, T> = new RandomStrategy()) {\r\n        this.simulationStrategy = simulationStrategy;\r\n        this.depth = depth;\r\n        this.samples = samples;\r\n        this.inPlayHeuristic = inPlayHeuristic;\r\n    }\r\n\r\n    pickMove(game:Game<STATE, T>, state: STATE): T|T[] {\r\n        if(!this.useCache)return this.performPickMove(game, state);\r\n        const hash = objectHash(state);\r\n        if(!this.cache[hash]){\r\n            this.cache[hash] = this.performPickMove(game, state);\r\n        }\r\n        return this.cache[hash];\r\n    }\r\n    performPickMove(game:Game<STATE, T>, state: STATE): T|T[] {\r\n        let evaluations = game.getValidMoves(state).map(move=>({move, score:0, outOf:0, depth: 0,unfinished:0, wins:0, secondaryObjective:0}));\r\n        if(evaluations.length === 0) throw new Error('No valid moves')\r\n        const playerGoal = getPlayerGoal(state.activePlayer);\r\n        const iterations = Math.ceil(this.samples/evaluations.length);\r\n        for(let i = 0; i < iterations; i++){\r\n            evaluations.forEach(evaluation=>{\r\n                const desire = state.activePlayer === 1 ? 1 : -1;\r\n                const stateWithScrambledUnknowns = game.randomizeHiddenInfo(state);\r\n                const moves = Array.isArray(evaluation.move) ? evaluation.move : [evaluation.move]\r\n                const newState = game.applyMoveChain(stateWithScrambledUnknowns, moves)\r\n                const simulation = this.simulateGame(game, newState) ;\r\n                evaluation.outOf++;\r\n                evaluation.secondaryObjective += simulation.secondaryObjective * desire;\r\n                if(simulation.status === playerGoal){\r\n                    evaluation.score++;\r\n                    evaluation.wins++;\r\n                }else if(simulation.status !== GameStatus.DRAW && simulation.status !== GameStatus.IN_PLAY){\r\n                    evaluation.score--;\r\n                }else if(simulation.heuristic !== undefined){\r\n                    evaluation.score += simulation.heuristic * desire ;\r\n                    evaluation.wins += (evaluation.score+1)/2;\r\n                    evaluation.unfinished++;\r\n                }else if(simulation.status === GameStatus.DRAW){\r\n                    evaluation.wins += 0.5;\r\n                }\r\n                evaluation.depth += simulation.length;\r\n            })\r\n            if(this.usePruning && (i % this.pruningPeriod) === (this.pruningPeriod - 1)){\r\n                 const highestEval =  _.maxBy(evaluations, 'score')!;\r\n                 const bestWilsonScore = wilsonScore(highestEval.wins, highestEval.outOf, this.z)\r\n                 evaluations = evaluations.filter(evaluation=> {\r\n                     if(evaluation === highestEval) return true;\r\n                     const evaluationWilsonScore = wilsonScore(evaluation.wins, evaluation.outOf, this.z)\r\n                     const confidentIsSuboptimal =  bestWilsonScore.lowerBound > evaluationWilsonScore.upperBound;\r\n                     return !confidentIsSuboptimal\r\n                 });\r\n            }\r\n            if(evaluations.length === 1){\r\n                break;\r\n            }\r\n        }\r\n        const highestEval =  _.maxBy(evaluations, 'score')!;\r\n        const highestScore = highestEval.score / highestEval.outOf\r\n        const bestMoves = evaluations.filter(({score,outOf})=>(score/outOf) > highestScore - 0.01)\r\n\r\n        if(highestScore > 0.95) {\r\n            const result = this.secondaryObjective ? _.maxBy(bestMoves, 'secondaryObjective')!  : _.minBy(bestMoves, 'depth')!\r\n            this.mood = JSON.stringify({\r\n                score: (result.score/result.outOf).toFixed(2),\r\n                goal: this.secondaryObjective ? 'Maximizing Secondary Objective' : 'Minimizing Length to Victory',\r\n                depth: (result.depth / result.outOf).toFixed(2),\r\n                unfinished: (result.unfinished / result.outOf).toFixed(2)\r\n            })\r\n            return result.move;\r\n        }else if(highestScore < -0.95){\r\n            const result = this.secondaryObjective ? _.maxBy(bestMoves, 'secondaryObjective')!  :  _.maxBy(bestMoves, 'depth')!\r\n            this.mood = JSON.stringify({\r\n                score: (result.score/result.outOf).toFixed(2),\r\n                goal: this.secondaryObjective ? 'Maximizing Secondary Objective' : 'Delaying time till loss',\r\n                depth: (result.depth / result.outOf).toFixed(2),\r\n                unfinished: (result.unfinished / result.outOf).toFixed(2)\r\n            })\r\n            return result.move;\r\n        }else{\r\n            const result =  _.maxBy(bestMoves, 'score')!\r\n            this.mood = JSON.stringify({\r\n                score: (result.score / result.outOf).toFixed(3),\r\n                depth: (result.depth / result.outOf).toFixed(2),\r\n                unfinished: (result.unfinished / result.outOf).toFixed(2)\r\n            })\r\n            return  result.move;\r\n        }\r\n    }\r\n    simulateGame(game:Game<STATE, T>, state:STATE):{status:GameStatus, length:number, heuristic?:number, secondaryObjective:number}{\r\n        let curState = state;\r\n        for(let i = 0; i < this.depth; i++){\r\n            const status = game.getStatus(curState);\r\n            const secondaryObjective = this.secondaryObjective ? this.secondaryObjective(curState) : 0;\r\n            if(status !== GameStatus.IN_PLAY) return {status, length: i, secondaryObjective};\r\n            try{\r\n                const move = this.simulationStrategy.pickMove(game, curState);\r\n                if(!move) return {status: GameStatus.DRAW, length: i, secondaryObjective};\r\n                curState = game.applyMoveChain(curState, move)\r\n            }catch(e){\r\n                if(e.message.includes('No valid move')) return {status: GameStatus.DRAW, length: i, secondaryObjective};\r\n                throw e;\r\n            }\r\n        }\r\n        const secondaryObjective = this.secondaryObjective ? this.secondaryObjective(curState) : 0;\r\n        return {status: GameStatus.IN_PLAY, length: this.depth, heuristic: this.inPlayHeuristic(curState), secondaryObjective};\r\n    }\r\n}\r\n\r\n","import TextTemplate, {Effect, ExecutionContext, Fizzle, PlayerTarget} from \"../TextTemplate\";\r\nimport CardGame, {CardGamePlayerState, CardGameState} from \"../../CardGame\";\r\nimport _ from 'lodash';\r\n\r\ntype KeysMatching<T, V> = {[K in keyof T]-?: T[K] extends V ? K : never}[keyof T];\r\n\r\nexport type CardSource = KeysMatching<CardGamePlayerState, readonly number[]>;\r\nexport type CardDest = KeysMatching<CardGamePlayerState, readonly number[]>;\r\n\r\nclass RandomTransferEffect extends Effect{\r\n    target:PlayerTarget\r\n    from:CardSource\r\n    to:CardDest\r\n    n: number;\r\n    constructor(target:PlayerTarget, from:CardSource, to:CardDest, n:number) {\r\n        super();\r\n        this.target = target;\r\n        this.from = from;\r\n        this.to = to;\r\n        this.n = n;\r\n    }\r\n\r\n    applyEffect(state: CardGameState, ctx:ExecutionContext, game:CardGame): CardGameState {\r\n        let s = state;\r\n        for(let i = 0; i<this.n;i++){\r\n            s = this.transfer(s, ctx, game);\r\n        }\r\n        return s;\r\n    }\r\n    transfer(state: CardGameState, ctx:ExecutionContext, game:CardGame): CardGameState {\r\n        const targetKey = this.target.resolveValue(state, ctx, game);\r\n        const player = state[targetKey];\r\n        const fromPile = [...player[this.from]];\r\n        const toPile = [...player[this.to]];\r\n        if(fromPile.length === 0 ){\r\n            throw new Fizzle(state);\r\n        }\r\n        const drawIndex = Math.floor(Math.random() * fromPile.length);\r\n        toPile.push(...fromPile.splice(drawIndex, 1))\r\n        return  {\r\n            ...state,\r\n            [targetKey]:{\r\n                ...player,\r\n                [this.to]:toPile,\r\n                [this.from]:fromPile\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class DrawCardEffect extends RandomTransferEffect{\r\n    constructor(target:PlayerTarget, n:number) {\r\n        super(target,'deck', 'hand', n);\r\n    }\r\n    transfer(state: CardGameState, ctx:ExecutionContext, game:CardGame): CardGameState {\r\n        const s = super.transfer(state, ctx, game);\r\n        const targetKey = this.target.resolveValue(state, ctx, game);\r\n        if(!game)debugger\r\n        return game.processEvent(s, 'player_draws', {\r\n            player: targetKey,\r\n            cardNumbers: _.xor(s[targetKey].hand, state[targetKey].hand),\r\n            from: 'deck'\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default function setup(){\r\n    new TextTemplate('Eff', '%Player draws? %N cards?', (target:PlayerTarget, n:number)=>new DrawCardEffect(target, n));\r\n    new TextTemplate('Eff', '%Player draws? up to %N cards?', (target:PlayerTarget, n:number)=>new DrawCardEffect(target, n));\r\n    new TextTemplate('Eff', '%Player discards? %N random cards?', (target:PlayerTarget, n:number)=>new RandomTransferEffect(target, 'hand','discardPile', n));\r\n    new TextTemplate('Eff', '%Player discards? the top card (?:from|of) (?:their|your) deck', (target:PlayerTarget)=>new RandomTransferEffect(target, 'deck','discardPile', 1));\r\n    new TextTemplate('Eff', '%Player discards? %N cards? from the top of (?:their|your) deck', (target:PlayerTarget, n:number)=>new RandomTransferEffect(target, 'deck','discardPile', n));\r\n    new TextTemplate('Eff', '%Player draws? %N random cards? from (?:their|your) discard pile', (target:PlayerTarget, n:number)=>new RandomTransferEffect(target, 'discardPile','hand', n));\r\n}","import TextTemplate, {Effect, ExecutionContext} from \"../TextTemplate\";\r\nimport CardGame, {CardGameState} from \"../../CardGame\";\r\nimport {PlayerKey} from \"../../Card\";\r\n\r\nclass ListEffect extends Effect{\r\n    a:Effect;\r\n    b:Effect;\r\n    constructor(a:Effect, b:Effect) {\r\n        super();\r\n        this.a = a;\r\n        this.b = b;\r\n    }\r\n    applyEffect(state: CardGameState, ctx:ExecutionContext, game:CardGame): CardGameState {\r\n        const afterA = this.a.applyEffect(state, ctx, game);\r\n        return this.b.applyEffect(afterA, ctx, game);\r\n    }\r\n}\r\n\r\nexport default function setup(){\r\n    new TextTemplate('Eff', '%Eff and %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n    new TextTemplate('Eff', '%Eff, and %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n    new TextTemplate('Eff', '%Eff, %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n    new TextTemplate('Eff', '%Eff\\\\. %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n    new TextTemplate('Eff', '%Eff then %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n    new TextTemplate('Eff', '%Eff, then %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n}","import TextTemplate, {Effect, ExecutionContext, PlayerTarget} from \"../TextTemplate\";\r\nimport CardGame, {CardGamePlayerState, CardGameState} from \"../../CardGame\";\r\nimport {PlayerKey} from \"../../Card\";\r\n\r\ntype KeysMatching<T, V> = {[K in keyof T]-?: T[K] extends V ? K : never}[keyof T];\r\nexport class ChangePlayerValue extends Effect{\r\n    target:PlayerTarget\r\n    amount:number;\r\n    field: KeysMatching<CardGamePlayerState, number>;\r\n    constructor(target:PlayerTarget, amount:number, field: KeysMatching<CardGamePlayerState, number>) {\r\n        super();\r\n        this.target=target;\r\n        this.amount=amount;\r\n        this.field=field;\r\n    }\r\n    applyEffect(state: CardGameState, ctx:ExecutionContext, game:CardGame): CardGameState {\r\n        const {field} = this;\r\n        const targetKey = this.target.resolveValue(state, ctx, game);\r\n        return   {\r\n            ...state,\r\n            [targetKey]:{\r\n                ...state[targetKey],\r\n                [field]:state[targetKey][field] + this.amount\r\n            }\r\n        }\r\n        /*return game.processEvent(s, 'player_take_damage', {\r\n            amount: this.amount,\r\n            player: targetKey\r\n        })*/\r\n    }\r\n}\r\n\r\nexport default function setup(){\r\n\r\n    new TextTemplate('Eff', '%Player loses? %N popularity', (target:PlayerTarget, n:number)=>new ChangePlayerValue(target, -n, 'popularity'));\r\n    new TextTemplate('Eff', '%Player gains? %N popularity', (target:PlayerTarget, n:number)=>new ChangePlayerValue(target, n, 'popularity'));\r\n\r\n}","import TextTemplate, {Effect, ExecutionContext, PlayerTarget, Resolver} from \"../TextTemplate\";\r\nimport CardGame, {CardGameState} from \"../../CardGame\";\r\nimport {PlayerKey} from \"../../Card\";\r\nimport {hasTarget, resolvePlayerContextually} from \"../setup\";\r\n\r\nexport class ConditionalEffect extends Effect{\r\n    eff:Effect;\r\n    condition:Resolver<boolean>;\r\n    constructor(eff:Effect, condition:Resolver<boolean>) {\r\n        super();\r\n        this.eff = eff;\r\n        this.condition = condition;\r\n    }\r\n    applyEffect(state: CardGameState, ctx:ExecutionContext, game:CardGame): CardGameState {\r\n        if(this.condition.resolveValue(state, ctx, game)){\r\n            return this.eff.applyEffect(state, ctx, game);\r\n        }\r\n        return state;\r\n    }\r\n}\r\n\r\nexport default function setup(){\r\n    const reversedConditionalFactory = (eff:Effect, cond:Resolver<boolean>)=>{\r\n        if(hasTarget(eff) && hasTarget(cond) && cond.target === resolvePlayerContextually){\r\n            cond.target = eff.target;\r\n            eff.target = resolvePlayerContextually;\r\n        }\r\n        return new ConditionalEffect(eff,cond)\r\n    };\r\n    new TextTemplate('Eff', '%Eff, if %Cond', reversedConditionalFactory);\r\n    new TextTemplate('Eff', '%Eff if %Cond', reversedConditionalFactory);\r\n    new TextTemplate('Eff', 'If %Cond, %Eff', (cond:Resolver<boolean>, eff:Effect)=>new ConditionalEffect(eff,cond));\r\n}","import TextTemplate, {Effect, ExecutionContext, PlayerTarget, Resolver} from \"../TextTemplate\";\r\nimport CardGame, {CardGamePlayerState, CardGameState} from \"../../CardGame\";\r\nimport {PlayerKey} from \"../../Card\";\r\n\r\nexport class PlayerLessThanCondition implements Resolver<boolean>{\r\n    target:PlayerTarget\r\n    n:number\r\n    mapping:(target:CardGamePlayerState)=>number\r\n    constructor(target:PlayerTarget, n:number, mapping:(target:CardGamePlayerState)=>number) {\r\n        this.target = target;\r\n        this.n = n;\r\n        this.mapping = mapping;\r\n    }\r\n    resolveValue(state: CardGameState, ctx: ExecutionContext, game:CardGame){\r\n        const targetKey = this.target.resolveValue(state, ctx, game);\r\n        const player = state[targetKey];\r\n        return this.mapping(player) < this.n;\r\n    }\r\n}\r\n\r\nexport default function setup(){\r\n    new TextTemplate(\r\n        'Cond',\r\n        '%Player\\\\s?(?:has|have) less than %N cards in (?:their|your) hand',\r\n        (target:PlayerTarget, n:number) => new PlayerLessThanCondition(target, n, player=>player.hand.length)\r\n    );\r\n    new TextTemplate(\r\n        'Cond',\r\n        '%Player\\\\s?(?:has|have) less than %N popularity',\r\n        (target:PlayerTarget, n:number) => new PlayerLessThanCondition(target, n, player=>player.popularity)\r\n    );\r\n}","import TextTemplate, {Ability, Effect, ExecutionContext, PlayerTarget} from \"../TextTemplate\";\r\nimport {PlayerKey} from \"../../Card\";\r\nimport {CardSource} from \"../Effects/RandomTransferEffect\";\r\nimport CardGame, {CardGameState} from \"../../CardGame\";\r\nimport {resolveActivePlayer} from \"../setup\";\r\n\r\nexport type EventType = 'player_draws'|'player_take_damage'|'turn_start'\r\nexport type EventParams<E extends EventType> =\r\n    E extends 'player_draws' ? PlayerDrawsEventParams\r\n    : E extends 'player_take_damage' ? PlayerTakesDamageEventParams\r\n    : E extends 'turn_start' ?  {player: PlayerKey}\r\n    : never;\r\n\r\ntype IsTargetedEventType<E extends EventType> = EventParams<E> extends {player:PlayerKey} ? E : never;\r\ntype TargetedEventType = IsTargetedEventType<EventType>\r\n\r\nexport type PlayerDrawsEventParams = {\r\n    player: PlayerKey,\r\n    cardNumbers: number[],\r\n    from: CardSource\r\n}\r\n\r\nexport type PlayerTakesDamageEventParams = {\r\n    player: PlayerKey,\r\n    amount: number\r\n}\r\n\r\n\r\n\r\nexport class OnEventAbility<E extends EventType> implements Ability{\r\n    abilityType = 'onEventAbility';\r\n    eventType: E;\r\n    eff: Effect;\r\n\r\n    constructor(eventType:E, eff:Effect) {\r\n        this.eventType = eventType;\r\n        this.eff = eff;\r\n    }\r\n\r\n    trigger(state:CardGameState, eventParams: EventParams<E>, ctx:ExecutionContext, game:CardGame):CardGameState{\r\n        const triggerCtx:ExecutionContext = {\r\n            ...ctx,\r\n            ...(eventParams?.player && {lastPlayer:eventParams.player}),\r\n            eventType: this.eventType,\r\n            eventParams\r\n        }\r\n        return this.eff.applyEffect(state, triggerCtx, game);\r\n    }\r\n\r\n    static isOnEventAbility<E extends EventType>(a:Ability, eventType:E): a is OnEventAbility<E>{\r\n        return a.abilityType === 'onEventAbility' && (a as OnEventAbility<any>).eventType === eventType;\r\n    }\r\n\r\n}\r\n\r\nclass FilteredOnEventAbility<E extends TargetedEventType> extends OnEventAbility<E>{\r\n    filter: PlayerTarget;\r\n\r\n    constructor(eventType:E, eff:Effect, filter: PlayerTarget) {\r\n        super(eventType, eff);\r\n        this.filter = filter\r\n    }\r\n    trigger(state:CardGameState, eventParams: EventParams<E>, ctx:ExecutionContext, game:CardGame):CardGameState{\r\n        if(this.filter.resolveValue(state, ctx, game) != eventParams.player) return state;\r\n        return super.trigger(state, eventParams, ctx, game);\r\n    }\r\n}\r\n\r\nexport function setup(){\r\n    const playerEventTypes:{eventType:TargetedEventType, text:string}[] = [\r\n        {eventType: 'player_draws', text: 'draws? a card'},\r\n        {eventType: 'player_take_damage', text: 'takes damage'}\r\n    ]\r\n    playerEventTypes.forEach(({eventType, text})=>{\r\n      new TextTemplate('Ability', `When(?:ever) %Player ${text}, %Eff`, (target:PlayerTarget, eff:Effect)=> new FilteredOnEventAbility(eventType, eff, target));\r\n      new TextTemplate('Ability', `When(?:ever) a player ${text}, %Eff`, (eff:Effect)=> new OnEventAbility(eventType, eff));\r\n    });\r\n    new TextTemplate('Ability', `At the start of each turn, %Eff`, (eff:Effect)=> new OnEventAbility('turn_start', eff));\r\n    new TextTemplate('Ability', `At the start of your turn, %Eff`, (eff:Effect)=> new FilteredOnEventAbility('turn_start', eff, resolveActivePlayer));\r\n}","import TextTemplate, {ChoiceAction, Effect, ExecutionContext, Resolver} from \"../TextTemplate\";\r\nimport CardGame, {CardGameChoiceMove, CardGameState} from \"../../CardGame\";\r\n\r\nexport class ChooseAPlayer implements ChoiceAction{\r\n    eff:Effect;\r\n    constructor(eff:Effect) {\r\n        this.eff = eff;\r\n    }\r\n\r\n    applyEffect(move: CardGameChoiceMove, state: CardGameState, ctx: ExecutionContext, game: CardGame): CardGameState {\r\n        return this.eff.applyEffect(state, {\r\n            ...ctx,\r\n            lastPlayer: move.choice === 1 ? 'playerOne' : 'playerTwo'\r\n        }, game)\r\n    }\r\n\r\n    getChoices(state: CardGameState, ctx:ExecutionContext, game: CardGame):CardGameChoiceMove[]{\r\n        return [{type: 'choice', choice:1}, {type: 'choice', choice: 2}];\r\n    }\r\n\r\n}\r\n\r\nexport function setupChooseAPlayer(){\r\n    new TextTemplate('ChoiceAction', 'Choose a player. %Eff', (eff:Effect)=> new ChooseAPlayer(eff))\r\n}","import TextTemplate, {Effect, ExecutionContext, PlayerTarget, ResolveConstant, Resolver} from \"../TextTemplate\";\r\nimport CardGame, {CardGamePlayerState, CardGameState} from \"../../CardGame\";\r\nimport {PlayerKey} from \"../../Card\";\r\n\r\ntype KeysMatching<T, V> = {[K in keyof T]-?: T[K] extends V ? K : never}[keyof T];\r\nexport abstract class MovePlayerEffect extends Effect{\r\n    target:PlayerTarget\r\n    protected constructor(target:PlayerTarget) {\r\n        super();\r\n        this.target=target;\r\n    }\r\n\r\n    abstract shift(pos:{x:number, y:number},state:CardGameState, ctx:ExecutionContext, game:CardGame): {x:number, y: number};\r\n\r\n    applyEffect(state: CardGameState, ctx:ExecutionContext, game:CardGame): CardGameState {\r\n        const playerKey = this.target.resolveValue(state, ctx, game);\r\n\r\n        return   {\r\n            ...state,\r\n            [playerKey]: {\r\n                ...state[playerKey],\r\n                position: this.shift(state[playerKey].position, state, ctx, game)\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class MovePlayerTowardsPointEffect extends MovePlayerEffect{\r\n    point:Resolver<{x:number, y:number}>\r\n    stepSize:number;\r\n    constructor(target:PlayerTarget, point:Resolver<{x:number, y:number}>,stepSize:number) {\r\n        super(target);\r\n        this.point = point;\r\n        this.stepSize = stepSize;\r\n    }\r\n     static shiftTowardsPoint(point:Resolver<{x:number, y:number}>, stepSize: number, pos: { x: number; y: number }, state:CardGameState, ctx: ExecutionContext, game: CardGame): { x: number; y: number } {\r\n        const target = point.resolveValue(state, ctx, game)\r\n        const deltaX = target.x - pos.x;\r\n        const deltaY = target.y - pos.y;\r\n        const deltaMag = Math.sqrt(deltaX*deltaX + deltaY*deltaY);\r\n        const clampedStepSize = stepSize > 0 ? Math.min(deltaMag, stepSize) : stepSize;\r\n        const clamp = (n:number)=>Math.max(-1, Math.min(1, n));\r\n        return {\r\n            x: clamp(pos.x + deltaX/deltaMag * clampedStepSize),\r\n            y: clamp(pos.y + deltaY/deltaMag * clampedStepSize),\r\n        }\r\n    }\r\n    shift(pos: { x: number; y: number }, state:CardGameState, ctx: ExecutionContext, game: CardGame): { x: number; y: number } {\r\n        return MovePlayerTowardsPointEffect.shiftTowardsPoint(this.point, this.stepSize, pos, state, ctx, game);\r\n    }\r\n\r\n}\r\nexport function setupMovePlayer(){\r\n    new TextTemplate('Eff',\r\n        '%Player shift towards %Position',\r\n        (playerTarget:PlayerTarget, point:Resolver<{x:number, y:number}>)=>new MovePlayerTowardsPointEffect(playerTarget, point, 2/21));\r\n    new TextTemplate('Eff',\r\n        '%Player shift away from %Position',\r\n        (playerTarget:PlayerTarget, point:Resolver<{x:number, y:number}>)=>new MovePlayerTowardsPointEffect(playerTarget, point, -2/21));\r\n\r\n}","import TextTemplate, {Effect, ExecutionContext, PlayerTarget, ResolveConstant, Resolver} from \"../TextTemplate\";\r\nimport CardGame, {CardGamePlayerState, CardGameState} from \"../../CardGame\";\r\nimport {PlayerKey} from \"../../Card\";\r\nimport {MovePlayerTowardsPointEffect} from \"./MovePlayerEffect\";\r\n\r\ntype KeysMatching<T, V> = {[K in keyof T]-?: T[K] extends V ? K : never}[keyof T];\r\nexport abstract class MoveDemographicEffect extends Effect{\r\n    demos:Resolver<number[]>\r\n    protected constructor(demos:Resolver<number[]>) {\r\n        super();\r\n        this.demos=demos;\r\n    }\r\n\r\n    abstract shift(pos:{x:number, y:number},state:CardGameState, ctx:ExecutionContext, game:CardGame): {x:number, y: number};\r\n\r\n    applyEffect(state: CardGameState, ctx:ExecutionContext, game:CardGame): CardGameState {\r\n        const indexes = this.demos.resolveValue(state, ctx, game);\r\n\r\n        return   {\r\n            ...state,\r\n            demographics: state.demographics.map((demo, i)=>indexes.includes(i)\r\n                ? this.shift(demo, state, ctx, game)\r\n                : demo\r\n            )\r\n        }\r\n    }\r\n}\r\nexport class MoveDemographicTowardsPointEffect extends MoveDemographicEffect{\r\n    point:Resolver<{x:number, y:number}>\r\n    stepSize:number;\r\n    constructor(demos:Resolver<number[]>, point:Resolver<{x:number, y:number}>,stepSize:number) {\r\n        super(demos);\r\n        this.point = point;\r\n        this.stepSize = stepSize;\r\n    }\r\n\r\n    shift(pos: { x: number; y: number }, state:CardGameState, ctx: ExecutionContext, game: CardGame): { x: number; y: number } {\r\n        return MovePlayerTowardsPointEffect.shiftTowardsPoint(this.point, this.stepSize, pos, state, ctx, game);\r\n    }\r\n\r\n}\r\n\r\nclass resolveAllDemographics implements Resolver<number[]>{\r\n    resolveValue(state: CardGameState, ctx: ExecutionContext){\r\n        return state.demographics.map((_,i)=>i);\r\n    }\r\n}\r\n\r\nclass resolveFollowers implements Resolver<number[]>{\r\n    playerTarget: PlayerTarget\r\n    constructor(playerTarget: PlayerTarget) {\r\n        this.playerTarget = playerTarget;\r\n    }\r\n\r\n    resolveValue(state: CardGameState, ctx: ExecutionContext, game:CardGame){\r\n        const target = this.playerTarget.resolveValue(state, ctx, game) === 'playerOne' ? 1 : 2;\r\n        return state.demographics\r\n            .map((demo,i)=>({demo, i}))\r\n            .filter(({demo})=>game.getDemographicVote(state,demo) === target)\r\n            .map(({i})=>i)\r\n    }\r\n}\r\n\r\nexport class ResolvePlayerPosition implements Resolver<{x:number, y:number}>{\r\n        playerTarget: PlayerTarget\r\n    constructor(playerTarget: PlayerTarget) {\r\n        this.playerTarget = playerTarget;\r\n    }\r\n\r\n  resolveValue(state: CardGameState, ctx: ExecutionContext, game:CardGame) {\r\n    const target = this.playerTarget.resolveValue(state, ctx, game)\r\n    return state[target].position;\r\n  }\r\n}\r\n\r\nexport const EXTREMES = {\r\n    hearts: {x:1, y:-1},\r\n    clubs: {x:-1, y:-1},\r\n    diamonds: {x:1, y:1},\r\n    spades: {x:-1, y:1},\r\n}\r\n\r\nexport function setupMoveDemographics(){\r\n    new TextTemplate('Demos', 'All demographics', () => new resolveAllDemographics());\r\n    new TextTemplate('Demos', '%Player followers', (playerTarget:PlayerTarget) => new resolveFollowers(playerTarget));\r\n\r\n\r\n    Object.entries(EXTREMES).forEach(([extreme, position]) => {\r\n        new TextTemplate('Position', `the ${extreme} extreme`, () => new ResolveConstant(position));\r\n    });\r\n\r\n    new TextTemplate('Position', 'the cente?re?', () => new ResolveConstant({x:0, y:0}));\r\n\r\n    new TextTemplate('Position', '%Player', (playerTarget:PlayerTarget) => new ResolvePlayerPosition(playerTarget));\r\n\r\n    new TextTemplate('Eff',\r\n        '%Demos shift towards %Position',\r\n        (demos:Resolver<number[]>, point:Resolver<{x:number, y:number}>)=>new MoveDemographicTowardsPointEffect(demos, point, 1/21));\r\n    new TextTemplate('Eff',\r\n        '%Demos shift away from %Position',\r\n        (demos:Resolver<number[]>, point:Resolver<{x:number, y:number}>)=>new MoveDemographicTowardsPointEffect(demos, point, -1/21));\r\n\r\n}","import TextTemplate, {ChoiceAction, Effect, ExecutionContext, Fizzle, Resolver} from \"../TextTemplate\";\r\nimport CardGame, {CardGameChoiceMove, CardGameState} from \"../../CardGame\";\r\nimport {PlayerKey} from \"../../Card\";\r\nimport {EXTREMES} from \"../Effects/MoveDemographicEffect\";\r\n\r\nconst EXTREMES_BY_ID = {\r\n    1: EXTREMES.hearts,\r\n    2: EXTREMES.clubs,\r\n    3: EXTREMES.diamonds,\r\n    4: EXTREMES.spades\r\n};\r\nexport const ID_BY_EXTREME:Record<string, number> = {\r\n    'hearts': 1,\r\n    'clubs': 2,\r\n    'diamonds':3,\r\n    'spades': 4\r\n}\r\n\r\nexport class ChooseAnExtreme implements ChoiceAction{\r\n    eff:Effect;\r\n    constructor(eff:Effect) {\r\n        this.eff = eff;\r\n    }\r\n\r\n    applyEffect(move: CardGameChoiceMove, state: CardGameState, ctx: ExecutionContext, game: CardGame): CardGameState {\r\n        return this.eff.applyEffect(state, {\r\n            ...ctx,\r\n            lastExtreme: EXTREMES_BY_ID[move.choice as 1|2|3|4]\r\n        }, game)\r\n    }\r\n\r\n    getChoices(state: CardGameState, ctx:ExecutionContext, game: CardGame):CardGameChoiceMove[]{\r\n        return [{type: 'choice', choice:1}, {type: 'choice', choice: 2},{type: 'choice', choice:3}, {type: 'choice', choice: 4}];\r\n    }\r\n\r\n}\r\n\r\nclass ContextualPosition implements Resolver<{x:number, y:number}>{\r\n    resolveValue(state:CardGameState, ctx:ExecutionContext):{x:number, y:number} {\r\n        if(!ctx.lastExtreme) throw new Fizzle(state)\r\n        return ctx.lastExtreme;\r\n    }\r\n}\r\n\r\nexport function setupChooseAnExtreme(){\r\n    new TextTemplate('ChoiceAction', 'Choose an extreme. %Eff', (eff:Effect)=> new ChooseAnExtreme(eff))\r\n    new TextTemplate('Position', 'that extreme', (e)=> new ContextualPosition())\r\n}","import setupList from './Effects/ListEffect';\r\nimport setupDraw from './Effects/RandomTransferEffect';\r\nimport setupDamage from './Effects/ChangePlayerValue';\r\nimport setupConditional from './Effects/ConditionalEffect'\r\nimport setupLessThan from './GameConditions/PlayerLessThanCondition'\r\nimport {setup as setupEventAbilities} from './Abilities/OnEventAbility'\r\nimport TextTemplate, {ExecutionContext, PlayerTarget} from \"./TextTemplate\";\r\nimport {PlayerKey} from \"../Card\";\r\nimport numberToWords from 'number-to-words';\r\nimport {setupChooseAPlayer} from \"./ChoiceActions/ChooseAPlayer\";\r\nimport {setupMoveDemographics} from './Effects/MoveDemographicEffect'\r\nimport {setupMovePlayer} from \"./Effects/MovePlayerEffect\";\r\nimport {setupChooseAnExtreme} from \"./ChoiceActions/ChooseAnExtreme\";\r\n\r\nexport interface HasTarget{\r\n    target: PlayerTarget;\r\n}\r\n\r\nexport function hasTarget(x:any):x is HasTarget{\r\n    return x.hasOwnProperty(\"target\");\r\n}\r\n\r\nexport const resolveActivePlayer:PlayerTarget = {\r\n    resolveValue(_, ctx:ExecutionContext):PlayerKey {\r\n        ctx.lastPlayer = ctx.playerKey;\r\n        return ctx.playerKey;\r\n    }\r\n}\r\nexport const resolveOpponent:PlayerTarget = {\r\n    resolveValue(_, ctx):PlayerKey {\r\n        const target =  ctx.playerKey === 'playerOne' ? 'playerTwo' : 'playerOne';\r\n        ctx.lastPlayer = target;\r\n        return target;\r\n    }\r\n}\r\nexport const resolvePlayerContextually:PlayerTarget = {\r\n    resolveValue(_, ctx):PlayerKey {\r\n        return ctx.lastPlayer || ctx.playerKey\r\n    }\r\n}\r\n\r\n\r\nexport default function () {\r\n        new TextTemplate('N',`a`,()=>1)\r\n    for(let n = 0; n < 25;n++){\r\n        new TextTemplate('N',numberToWords.toWords(n),()=>n)\r\n        new TextTemplate('N',`${n}`,()=>n)\r\n    }\r\n    new TextTemplate('Player','yourself',()=>resolveActivePlayer)\r\n    new TextTemplate('Player','you',()=>resolveActivePlayer)\r\n    new TextTemplate('Player','your',()=>resolveActivePlayer)\r\n    new TextTemplate('Player','your opponent',()=>resolveOpponent)\r\n    new TextTemplate('Player','your opponent\\'?s',()=>resolveOpponent)\r\n    new TextTemplate('Player','the other player',()=>resolveOpponent)\r\n    new TextTemplate('Player','they',()=>resolvePlayerContextually)\r\n    new TextTemplate('Player','them',()=>resolvePlayerContextually)\r\n    new TextTemplate('Player','their',()=>resolvePlayerContextually)\r\n    new TextTemplate('Player','that player',()=>resolvePlayerContextually)\r\n    new TextTemplate('Player','',()=>resolvePlayerContextually)\r\n    setupList();\r\n    setupDraw();\r\n    setupDamage();\r\n    setupConditional();\r\n    setupLessThan();\r\n    setupEventAbilities();\r\n    setupMoveDemographics();\r\n    setupChooseAPlayer();\r\n    setupMovePlayer();\r\n    setupChooseAnExtreme();\r\n}","import {Game, GameStatus} from \"../MCTS/mcts\";\r\nimport chalk from 'chalk'\r\nimport {Card, ChoiceActionCard, EffectCard, ItemCard, PlayerKey} from \"./Card\";\r\nimport {DrawCardEffect} from \"./Components/Effects/RandomTransferEffect\";\r\nimport {resolveActivePlayer} from \"./Components/setup\";\r\nimport {ChoiceAction, Fizzle} from \"./Components/TextTemplate\";\r\nimport {ConditionalEffect} from \"./Components/Effects/ConditionalEffect\";\r\nimport {EventParams, EventType, OnEventAbility} from \"./Components/Abilities/OnEventAbility\";\r\nimport _ from 'lodash'\r\n\r\nexport type CardGameChain = CardGameMove|CardGameMove[]\r\n\r\nexport interface CardGamePlayerState {\r\n    readonly popularity: number;\r\n    readonly position: {readonly x: number,  readonly y: number};\r\n    readonly hand: readonly number[];\r\n    readonly board: readonly number[];\r\n    readonly discardPile: readonly number[];\r\n    readonly deck: readonly number[];\r\n}\r\n\r\nexport interface CardGameState {\r\n    readonly activePlayer: 1|2;\r\n    readonly isFirstTurn: boolean;\r\n    readonly step: 'draw'|'play'|'choice'\r\n    readonly roundsUntilElection: number;\r\n    readonly cardPlayedThisTurn: boolean;\r\n    readonly endRoundAfterThisTurn: boolean;\r\n    readonly demographics: readonly {x:number, y:number}[]\r\n    readonly playerOne: CardGamePlayerState\r\n    readonly playerTwo: CardGamePlayerState;\r\n    readonly cardBeingPlayed?:number,\r\n    readonly log?:string[],\r\n}\r\n\r\ninterface CardGamePlayCardMove {type:\"play\"; cardNumber:number}\r\ninterface CardGameDiscardCardMove{type:\"discard\"; cardNumber:number}\r\ninterface CardGameEndMove {type:\"end\"}\r\nexport interface CardGameChoiceMove {type:\"choice\", choice:number}\r\nexport type CardGameMove = CardGameEndMove | CardGamePlayCardMove | CardGameDiscardCardMove | CardGameChoiceMove;\r\n\r\n\r\nexport default class CardGame extends Game<CardGameState, CardGameMove>{\r\n\r\n    cardIndex:Record<number, Card>;\r\n    deckOne:number[];\r\n    deckTwo:number[];\r\n    static STARTING_HAND_SIZE: number = 6;\r\n\r\n    constructor(cardIndex:Record<number,Card>, deckOne?:number[], deckTwo?:number[]){\r\n        super();\r\n        this.cardIndex = cardIndex;\r\n        this.deckOne = deckOne ? deckOne : Object.keys(this.cardIndex).map(i=>parseFloat(i));\r\n        this.deckTwo = deckTwo ? deckTwo : this.deckOne;\r\n    }\r\n\r\n    applyMove(state: CardGameState, move: CardGameMove): CardGameState {\r\n        if(move.type === \"end\"){\r\n            return this.onTurnEnd(state);\r\n        }else if(move.type === \"play\"){\r\n            return this.applyCardPlay(state, move.cardNumber);\r\n        }else if(move.type === \"discard\"){\r\n            return this.applyCardDiscard(state, move.cardNumber)\r\n        }else if(move.type === \"choice\"){\r\n            return this.applyChoiceMove(state, move)\r\n        }\r\n        throw new Error(\"Unknown move\")\r\n    }\r\n\r\n    getSensibleMoves(state: CardGameState): CardGameChain[] {\r\n        if(state.roundsUntilElection === 1 && state.endRoundAfterThisTurn){\r\n            const votes = this.getVotes(state);\r\n            if(votes[state.activePlayer] > votes[(3-state.activePlayer) as 1|2]) return [{type:'end'}]\r\n        }\r\n        if(state.cardPlayedThisTurn) return [{type:'end'}]\r\n        return this.getCardMoves(state).filter((chain)=>{\r\n            const cardNumber = Array.isArray(chain) ? chain[0].cardNumber : chain.cardNumber;\r\n            if(!this.cardIndex[cardNumber]){\r\n               throw new Error(\"Can't find card \"+cardNumber)\r\n            }\r\n            const {effect} = (this.cardIndex[cardNumber] as EffectCard);\r\n            if(effect?.constructor.name !== \"ConditionalEffect\") {\r\n                return true;\r\n            }\r\n            const {condition} = (effect as ConditionalEffect)\r\n            const playerKey = state.activePlayer === 1 ? 'playerOne' : 'playerTwo';\r\n            return condition.resolveValue(state,{playerKey}, this)\r\n        })\r\n    }\r\n\r\n    getDemographicVote(state:CardGameState, pos:{x:number, y:number}):1|2|undefined{\r\n        const bPop = state.playerOne.popularity;\r\n        const rPop = state.playerTwo.popularity;\r\n\r\n        const bdistSquared = Math.pow(state.playerOne.position.x - pos.x, 2) +  Math.pow(state.playerOne.position.y - pos.y, 2)\r\n        const rdistSquared = Math.pow(state.playerTwo.position.x - pos.x, 2) +  Math.pow(state.playerTwo.position.y - pos.y, 2)\r\n        const rScore =  rPop/100.0 - rdistSquared;\r\n        const bScore =  bPop/100.0 -  bdistSquared;\r\n\r\n        if(bScore > rScore && bScore > 0.0) return 1;\r\n        if(rScore > bScore && rScore > 0.0) return 2;\r\n        return undefined;\r\n    }\r\n\r\n    getVotes(state:CardGameState):{1:number, 2:number}{\r\n        const votes =  _.chain(state.demographics)\r\n            .map(pos=>this.getDemographicVote(state, pos))\r\n            .filter(_.identity)\r\n            .countBy()\r\n            .value() as {1:number, 2:number}\r\n        return {\r\n            1: votes[1]||0,\r\n            2: votes[2]||0\r\n        };\r\n    }\r\n\r\n    getStatus(state: CardGameState): GameStatus {\r\n        if(state.roundsUntilElection > 0) return GameStatus.IN_PLAY;\r\n        const votes = this.getVotes(state);\r\n        if(votes[1] > votes[2]) return GameStatus.WIN;\r\n        if(votes[1] < votes[2]) return GameStatus.LOSE;\r\n        return GameStatus.DRAW;\r\n    }\r\n\r\n    getValidMoves(state: CardGameState): (CardGameChain)[] {\r\n        if(state.cardBeingPlayed!==undefined){\r\n            const playerKey = state.activePlayer  === 1 ? 'playerOne' : 'playerTwo';\r\n            const card = this.cardIndex[state.cardBeingPlayed];\r\n            if(!ChoiceActionCard.is(card)) throw new Error(\"Not a choice card!\")\r\n            return card.choiceAction.getChoices(state, {playerKey}, this);\r\n        }\r\n        if(state.step === 'draw') return this.getDiscardMoves(state);\r\n        return [{type:\"end\"}, ...this.getCardMoves(state)]\r\n    }\r\n\r\n    newGame(): CardGameState {\r\n        const newPlayer = {\r\n            hand:[],\r\n            discardPile:[],\r\n            board:[]\r\n        }\r\n        const preGame:CardGameState = {\r\n            activePlayer: 1,\r\n            roundsUntilElection: 4,\r\n            demographics: new Array(50).fill(0).map(()=>({x:(Math.random()+Math.random())-1, y:Math.random()+Math.random()-1})),\r\n            endRoundAfterThisTurn: false,\r\n            cardPlayedThisTurn: false,\r\n            step: 'play',\r\n            isFirstTurn: true,\r\n            playerOne:{\r\n                ...newPlayer,\r\n                deck: this.deckOne,\r\n                popularity: 10,\r\n                position:{x:0.2, y:0},\r\n            },\r\n            playerTwo:{\r\n                deck: this.deckTwo,\r\n                position:{x:-0.2, y:0},\r\n                popularity: 10,\r\n                ...newPlayer\r\n            }\r\n        };\r\n        const blueDrawCardsEffect = new DrawCardEffect(resolveActivePlayer, CardGame.STARTING_HAND_SIZE - 1);\r\n        const redDrawCardsEffect = new DrawCardEffect(resolveActivePlayer, CardGame.STARTING_HAND_SIZE);\r\n        const p1Draw =  blueDrawCardsEffect.applyEffect(preGame,{playerKey: \"playerOne\"}, this);\r\n        return redDrawCardsEffect.applyEffect(p1Draw,{playerKey: \"playerTwo\"}, this);\r\n    }\r\n\r\n    print( {playerOne, playerTwo, ...state}: CardGameState): void {\r\n        console.log(chalk.white(JSON.stringify(state,null,4)))\r\n        console.log(chalk.blue(JSON.stringify(playerOne,null,4)))\r\n        console.log(chalk.red(JSON.stringify(playerTwo,null,4)))\r\n    }\r\n\r\n    randomizeHiddenInfo(state: CardGameState): CardGameState {\r\n        const opponentKey = state.activePlayer === 1 ? 'playerTwo' : 'playerOne'\r\n\r\n        // Put their hand back into the deck, then draw up to the same number\r\n        const deck = [...state[opponentKey].deck, ...state[opponentKey].hand];\r\n        const hand = []\r\n        for(let i = 0; i < state[opponentKey].hand.length; i++){\r\n           const drawIndex = Math.floor(Math.random() * deck.length);\r\n            hand.push(...deck.splice(drawIndex, 1))\r\n        }\r\n\r\n        return {\r\n            ...state,\r\n            [opponentKey]:{\r\n                ...state[opponentKey],\r\n                hand,\r\n                deck\r\n            }\r\n        };\r\n    }\r\n\r\n    private getCardMoves(state: CardGameState):(CardGamePlayCardMove|[CardGamePlayCardMove,CardGameChoiceMove])[] {\r\n        if(state.step != 'play') return [];\r\n        const playerKey = state.activePlayer === 1 ? 'playerOne' : 'playerTwo';\r\n        const activePlayer = state[playerKey];\r\n        return _.flatMap(activePlayer.hand, cardNumber=>{\r\n            const playMove:CardGamePlayCardMove = {type:\"play\", cardNumber};\r\n            const card = this.cardIndex[cardNumber];\r\n            if(ChoiceActionCard.is(card)){\r\n                const choices:CardGameChoiceMove[] =  card.choiceAction.getChoices(state, {playerKey} , this);\r\n                const chain = choices.map(choice => [playMove, choice] as [CardGamePlayCardMove,CardGameChoiceMove])\r\n                return chain as (CardGamePlayCardMove|[CardGamePlayCardMove,CardGameChoiceMove])[]\r\n            }\r\n            return [playMove];\r\n        })\r\n    }\r\n   private getDiscardMoves(state: CardGameState):CardGameDiscardCardMove[] {\r\n        if(state.step != 'draw') return [];\r\n        const activePlayer = state.activePlayer === 1 ? state.playerOne : state.playerTwo;\r\n        return activePlayer.hand.map(cardNumber=>({type:\"discard\", cardNumber}))\r\n    }\r\n\r\n    private onTurnEnd(state: CardGameState):CardGameState {\r\n        const activePlayer = state.activePlayer === 1 ? 2 : 1;\r\n        const playerKey = activePlayer  === 1 ? 'playerOne' : 'playerTwo';\r\n        const roundEnding = state.endRoundAfterThisTurn;\r\n        const afterRoundUpdateState =  roundEnding ? this.onRoundEnd(state) : state;\r\n        const afterTurnEndState:CardGameState =  {\r\n            ...afterRoundUpdateState,\r\n            step: 'play',\r\n            cardPlayedThisTurn: false,\r\n            isFirstTurn: false,\r\n            endRoundAfterThisTurn: !state.cardPlayedThisTurn && !roundEnding,\r\n            activePlayer,\r\n        }\r\n        return this.processEvent(afterTurnEndState, 'turn_start',{player:playerKey})\r\n    }\r\n\r\n    private applyCardPlay(state: CardGameState, cardNumber: number):CardGameState {\r\n        const card = this.cardIndex[cardNumber];\r\n        return card.play(state, cardNumber, this)\r\n    }\r\n    private applyCardDiscard(state: CardGameState, cardNumber: number):CardGameState {\r\n        const playerKey = state.activePlayer  === 1 ? 'playerOne' : 'playerTwo';\r\n        const player = state[playerKey];\r\n\r\n        const hand = [...player.hand];\r\n        const discardPile = [...player.discardPile];\r\n        discardPile.push(...hand.splice(hand.indexOf(cardNumber), 1))\r\n        return {\r\n            ...state,\r\n            step: hand.length > CardGame.STARTING_HAND_SIZE ? 'draw' :'play',\r\n            [playerKey]:{\r\n                ...player,\r\n                hand,\r\n                discardPile\r\n            }\r\n        }\r\n    }\r\n\r\n    getHeuristic(state: CardGameState):number {\r\n        const votes = this.getVotes(state)\r\n        const bluePoints = votes[1]\r\n        const redPoints = votes[2]\r\n        if(bluePoints === redPoints) return 0;\r\n        return (bluePoints-redPoints)/(redPoints+bluePoints)\r\n    }\r\n\r\n\r\n    processEvent<E extends EventType>(baseState:CardGameState, eventType:E, eventParams: EventParams<E>):CardGameState{\r\n        if(this.getStatus(baseState) != GameStatus.IN_PLAY) return baseState\r\n\r\n        let state = baseState;\r\n        const playerKeys:PlayerKey[] = ['playerOne', 'playerTwo'];\r\n        playerKeys.forEach((playerKey:PlayerKey)=>{\r\n            const itemCardsInPlay = baseState[playerKey].board\r\n                .map(n=>this.cardIndex[n])\r\n                .filter(c=>ItemCard.isItemCard(c)) as ItemCard[]\r\n\r\n            const listeners = itemCardsInPlay\r\n                .map(c=>c.ability)\r\n                .filter(a=>OnEventAbility.isOnEventAbility(a, eventType)) as OnEventAbility<E>[]\r\n\r\n            listeners.forEach(listener=>{\r\n                try{\r\n                    state = listener.trigger(state, eventParams, {playerKey}, this);\r\n                }catch(e){\r\n                    if(!Fizzle.isFizzle(e)) throw e;\r\n                    state = e.returnState;\r\n                }\r\n            })\r\n        })\r\n\r\n        return state;\r\n    }\r\n\r\n    private applyChoiceMove(state: CardGameState, move: CardGameChoiceMove):CardGameState {\r\n        const playerKey = state.activePlayer  === 1 ? 'playerOne' : 'playerTwo';\r\n        const card = this.cardIndex[state.cardBeingPlayed!];\r\n        if(!ChoiceActionCard.is(card)) {\r\n            throw new Error(`${state.cardBeingPlayed} Not a choice card!`)\r\n        }\r\n        const stateAfterEffects = (()=>{\r\n            try{\r\n                return card.choiceAction.applyEffect(move, state, {playerKey}, this);\r\n            }catch(e){\r\n                if(!Fizzle.isFizzle(e))throw e;\r\n                return e.returnState;\r\n            }\r\n        })();\r\n        return {\r\n            ...stateAfterEffects,\r\n            step: 'play',\r\n            cardBeingPlayed: undefined\r\n        }\r\n    }\r\n\r\n    private onRoundEnd(state: CardGameState):CardGameState {\r\n        const updatePlayer = (player:CardGamePlayerState) => ({\r\n            ...player,\r\n            hand: []\r\n        })\r\n        const newState = {\r\n            ...state,\r\n            endRoundIfNoCardPlayedThisTurn: false,\r\n            roundsUntilElection: state.roundsUntilElection - 1,\r\n            playerOne: updatePlayer(state.playerOne),\r\n            playerTwo: updatePlayer(state.playerTwo),\r\n        }\r\n        if(state.roundsUntilElection === 1) return newState;\r\n        const drawEffect = new DrawCardEffect(resolveActivePlayer, 6)\r\n        return drawEffect.applyEffectNoThrow(drawEffect.applyEffectNoThrow(newState, {playerKey:'playerTwo'}, this), {playerKey:'playerOne'}, this);\r\n    }\r\n\r\n    getActiveActionChoice(state:CardGameState): ChoiceAction|undefined{\r\n        if(state.cardBeingPlayed === undefined) return undefined;\r\n        const card = this.cardIndex[state.cardBeingPlayed];\r\n        if(!ChoiceActionCard.is(card)) throw new Error(\"Not a choice card!\")\r\n        return card.choiceAction\r\n    }\r\n}","import React, {CSSProperties, useEffect} from 'react'\r\n\r\nconst ARROW_STYLE:CSSProperties= {\r\n    boxSizing: 'border-box',\r\n    position:'absolute',\r\n    background: 'orange',\r\n    width: 14,\r\n    zIndex: 1,\r\n    left: 10,\r\n    top: 90,\r\n    marginBottom: 100,\r\n    transformOrigin:'top',\r\n    display: 'flex',\r\n    flexDirection: \"column-reverse\",\r\n    alignItems: \"center\",\r\n    cursor: 'none',\r\n    pointerEvents: 'none',\r\n}\r\n\r\nconst HEAD_STYLE:CSSProperties= {\r\n    position: 'relative',\r\n    top: 10,\r\n    borderLeft: '20px solid transparent',\r\n    borderRight: '20px solid transparent',\r\n    borderTop: '20px solid orange',\r\n    cursor: 'none',\r\n    pointerEvents: 'none',\r\n}\r\n\r\nconst XOFFSET = 20;\r\nconst YOFFSET = -45;\r\n\r\nconst ChoiceArrow:React.FunctionComponent = ()=>{\r\n    const [height, setHeight] = React.useState(100)\r\n    const [theta, setTheta] = React.useState(45)\r\n    const element = React.useRef<HTMLDivElement>(null);\r\n    const dynamicStyle:CSSProperties = {\r\n        height,\r\n        transform: `rotate(${theta}rad)`\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const listener = (event:MouseEvent)=>{\r\n            if(!element.current) return;\r\n            const domRect = element.current.getBoundingClientRect();\r\n            const deltaX = event.clientX - domRect.x - XOFFSET;\r\n            const deltaY = event.clientY - domRect.y - YOFFSET;\r\n            const theta = Math.atan2(-deltaX, deltaY);\r\n            const height = Math.sqrt(deltaX*deltaX+deltaY*deltaY)\r\n\r\n            setTheta(theta)\r\n            setHeight(height)\r\n        };\r\n        window.addEventListener('mousemove',listener)\r\n        return ()=>window.removeEventListener('mousemove', listener)\r\n    },[element])\r\n    return <div  ref={element}>\r\n        <div style={{...ARROW_STYLE, ...dynamicStyle}}>\r\n            <div style={HEAD_STYLE}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChoiceArrow;","import {useState} from \"react\";\r\n\r\ntype ReactHoverDelayTriggerProps = React.PropsWithChildren< {\r\n    delay: number,\r\n    handleHoverTrigger: ()=>void,\r\n    handleHoverCancel: ()=>void,\r\n}>\r\nexport default function DelayHover(props:ReactHoverDelayTriggerProps):JSX.Element {\r\n    const [tId, setTId] = useState(0)\r\n    const [hovered, setHovered] = useState(false)\r\n    return <span\r\n        onMouseOver={()=>{\r\n            if(!hovered){\r\n                const i = window.setTimeout(()=>{\r\n                    props.handleHoverTrigger()\r\n                }, props.delay)\r\n                setHovered(true)\r\n                setTId(i);\r\n            }\r\n        }}\r\n         onMouseOut={()=>{\r\n            clearTimeout(tId)\r\n            setHovered(false)\r\n            props.handleHoverCancel()\r\n        }}\r\n    >\r\n        {props.children}\r\n    </span>\r\n}","import React, {CSSProperties, FunctionComponent} from \"react\";\r\nimport {Card, ChoiceActionCard} from \"../cardgame/Card\";\r\nimport ChoiceArrow from \"./ChoiceArrow\";\r\nimport ReactHoverDelayTrigger from 'react-hover-delay-trigger'\r\nimport {CardGameMove} from \"../cardgame/CardGame\";\r\nimport DelayHover from \"./DelayHover\";\r\n\r\ntype CardProps = {\r\n    card:Card,\r\n    onClick:()=>void,\r\n    setPreview:(move?:CardGameMove)=>void,\r\n    isOpponent:boolean;\r\n    beingPlayed:boolean;\r\n    canBeDiscarded:boolean;\r\n    canBePlayed:boolean;\r\n    isHidden:boolean;\r\n    onBoard:boolean;\r\n}\r\n\r\nconst CARD_STYLE:CSSProperties = {\r\n    backgroundColor: 'white',\r\n    borderWidth: '1px',\r\n    borderColor:'black',\r\n    borderStyle: 'solid',\r\n    fontSize: 11,\r\n    borderRadius: 3,\r\n    width: 80,\r\n    height: 120,\r\n    marginLeft: 5,\r\n    marginTop: 5,\r\n    marginRight: 5,\r\n    marginBottom: 5,\r\n    top:0,\r\n    display: 'inline-block',\r\n    transition: 'transform 0.3s, margin 0.35s ease-in 0.3s, top 0.4s ease-in-out 0.5s',\r\n    cursor: 'not-allowed',\r\n    overflow: 'hidden',\r\n    zIndex: 0,\r\n}\r\nconst CARD_TITLE_STYLE:CSSProperties ={\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n}\r\nconst BEING_PLAYED_CARD_STYLE = {\r\n    ...CARD_STYLE,\r\n    color: 'blue',\r\n    borderColor: 'black',\r\n    transform: \"scale(1.3)\",\r\n    marginLeft: -40,\r\n    marginRight: -40,\r\n    zIndex: 1,\r\n}\r\nconst CAN_BE_DISCADED_STYLE = {\r\n    ...CARD_STYLE,\r\n    borderColor: 'red',\r\n    borderWidth: 3,\r\n    cursor: 'pointer'\r\n}\r\nconst CAN_BE_PLAYED_STYLE = {\r\n    ...CARD_STYLE,\r\n    borderColor: 'blue',\r\n    borderWidth: 3,\r\n    cursor: 'pointer',\r\n}\r\n\r\nconst MOVE_DOWN_STYLE = {\r\n    top: 160,\r\n}\r\nconst MOVE_UP_STYLE = {\r\n    top: -160,\r\n}\r\n\r\nconst HIDDEN_STYLING = {\r\n    backgroundColor: 'darkgray',\r\n    color: 'darkgray',\r\n    transform: 'rotate3d(0,1,0,0.5turn)'\r\n}\r\n\r\nconst VANISHED_STYLE = {\r\n    transform: 'scale(0)'\r\n}\r\n\r\nconst WRAPPER_STYLE:CSSProperties = {\r\n    position: \"relative\",\r\n     transition: 'transform 0.3s, margin 0.35s ease-in 0.3s, top 0.4s ease-in-out 0.5s',\r\n   display:'inline-block',\r\n    top:0,\r\n    zIndex: 1,\r\n}\r\n\r\nconst CardDisplay:FunctionComponent<CardProps> = (props)=> {\r\n    const [hasAppearedOnBoard, setHasAppearedOnBoard] = React.useState(props.onBoard && !props.beingPlayed)\r\n    React.useEffect(() => {\r\n        if (props.onBoard && props.beingPlayed) {\r\n            const n = setTimeout(() => {\r\n                setHasAppearedOnBoard(true)\r\n            }, 800)\r\n            return () => window.clearTimeout(n)\r\n        } else if (props.onBoard && !props.beingPlayed) {\r\n            const n = setTimeout(() => {\r\n                setHasAppearedOnBoard(false)\r\n            }, 800)\r\n            return () => window.clearTimeout(n)\r\n        }\r\n    })\r\n\r\n\r\n    const {card, beingPlayed} = props;\r\n    const situationalStyle = props.canBeDiscarded ? CAN_BE_DISCADED_STYLE :\r\n        props.canBePlayed ? CAN_BE_PLAYED_STYLE :\r\n            hasAppearedOnBoard ? VANISHED_STYLE :\r\n                {};\r\n    const positionStyling = (props.beingPlayed && props.isOpponent) ? MOVE_DOWN_STYLE :\r\n        (props.beingPlayed && !props.isOpponent) ? MOVE_UP_STYLE :\r\n            {};\r\n    const hiddenStyling = props.isHidden ? HIDDEN_STYLING : {}\r\n    const onClick = props.canBeDiscarded || props.canBePlayed ? props.onClick : () => {\r\n    };\r\n\r\n    return <DelayHover\r\n            delay={400}\r\n            handleHoverTrigger={()=>{\r\n                if(props.canBePlayed){\r\n                    props.setPreview({type:'play', cardNumber:props.card.cardNumber})\r\n                }\r\n            }}\r\n            handleHoverCancel={()=>{\r\n                props.setPreview()\r\n            }}\r\n          >\r\n            <div style={{...WRAPPER_STYLE, ...positionStyling}}>\r\n        <div style={{...beingPlayed ? BEING_PLAYED_CARD_STYLE : CARD_STYLE, ...situationalStyle, ...hiddenStyling}}\r\n             onClick={onClick}>\r\n            <div style={CARD_TITLE_STYLE}>\r\n                {card.getName()}\r\n            </div>\r\n            <div>\r\n                {card.getText()}\r\n            </div>\r\n        </div>\r\n        {props.beingPlayed && ChoiceActionCard.is(card) && !props.isOpponent && <ChoiceArrow/>}\r\n    </div>\r\n        </DelayHover>\r\n}\r\n\r\nexport default CardDisplay;","export default __webpack_public_path__ + \"static/media/bg.e49eda7f.png\";","import React, {useEffect, useState} from \"react\";\r\ntype GetComponentProps<T> = T extends React.ComponentType<infer P> | React.Component<infer P> ? P : never\r\n\r\ntype KeysMatching<T, V> = {[K in keyof T]-?: T[K] extends V ? K : never}[keyof T];\r\ntype TransitionPropsProps<X extends Record<string, unknown>> = {\r\n    component: (props:X)=>JSX.Element,\r\n    propList:KeysMatching<X, number>[]\r\n} & X\r\n\r\nfunction TransitionProps<X extends Record<string, unknown>>({\r\n            component,\r\n           propList,\r\n           ...rest\r\n}:TransitionPropsProps<X>):JSX.Element {\r\n  const [visibleProps, setVisibleProps] = useState(rest);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      const newVisibleProps:any = {};\r\n      let requiresUpdate = false;\r\n      for (let key of propList) {\r\n        const currentValue = visibleProps[key as string] as number;\r\n        const targetValue = rest[key as string] as number;\r\n        const diff = targetValue - currentValue\r\n          if(Math.abs(diff)>0.005){\r\n              requiresUpdate=true;\r\n          }\r\n        const newValue = currentValue + diff/5;\r\n        newVisibleProps[key] = newValue;\r\n      }\r\n      if(requiresUpdate) setVisibleProps(newVisibleProps);\r\n    },100);\r\n  }, [rest, visibleProps]);\r\n\r\n  return component({...rest as any, ...visibleProps});\r\n};\r\n\r\nexport default TransitionProps;","import {Card} from \"../cardgame/Card\";\r\nimport React, {CSSProperties} from \"react\";\r\nimport { usePopperTooltip } from \"react-popper-tooltip\";\r\nimport \"react-popper-tooltip/dist/styles.css\";\r\nimport bg from './assets/bg.png'\r\nimport CardGame, {CardGameChoiceMove, CardGameMove, CardGameState} from \"../cardgame/CardGame\";\r\nimport { Shaders, Node, GLSL } from \"gl-react\";\r\nimport { Surface } from \"gl-react-dom\";\r\nimport TransitionProps from \"./TransitionProps\";\r\nimport {ChooseAPlayer} from \"../cardgame/Components/ChoiceActions/ChooseAPlayer\";\r\nimport {EXTREMES} from \"../cardgame/Components/Effects/MoveDemographicEffect\";\r\nimport {ChooseAnExtreme, ID_BY_EXTREME} from \"../cardgame/Components/ChoiceActions/ChooseAnExtreme\";\r\nimport DelayHover from \"./DelayHover\";\r\n\r\ntype DemographicDisplayProps = {\r\n    gamestate: CardGameState,\r\n    game: CardGame,\r\n    onChoiceClick: (move:CardGameChoiceMove)=>void,\r\n    setPreview: (move?:CardGameMove)=>void;\r\n    previewState?: CardGameState;\r\n}\r\n\r\nconst COMPASS_STYLE:CSSProperties = {\r\n    height: 500,\r\n    width: 500,\r\n    border: '1px solid black',\r\n    position: 'relative',\r\n    margin: 10,\r\n    overflow: 'hidden',\r\n    marginBottom: 160,\r\n}\r\nconst PLAYER_STYLE:CSSProperties = {\r\n    width: 30,\r\n    height: 30,\r\n    borderRadius: '100%',\r\n    border: '1px solid black',\r\n    position: 'absolute',\r\n    top: -15,\r\n    left: -15,\r\n    transition: 'background 0.3s, transform 0.3s'\r\n}\r\nconst DEMOGRAPHIC_STYLE:CSSProperties = {\r\n    width: 10,\r\n    height: 10,\r\n    borderRadius: '20%',\r\n    border: '1px solid black',\r\n    position: 'absolute',\r\n    top: -5,\r\n    left: -5,\r\n    transition: 'background 0.3s, transform 0.3s',\r\n    pointerEvents:'none',\r\n}\r\n\r\nconst VOTES_BAR_STYLE:CSSProperties = {\r\n    border: '1px solid black',\r\n    height: 25,\r\n    overflow: 'hidden',\r\n    color: 'white'\r\n}\r\n\r\nfunction coordsToTransform({x,y}:{x:number, y:number}){\r\n    return `translate(${(x+1)*250}px,${(y+1)*250 }px)`;\r\n}\r\n\r\nconst shaders = Shaders.create({\r\n  helloBlue: {\r\n    frag: GLSL`\r\nprecision highp float;\r\nvarying vec2 uv;\r\nuniform float bluePop;\r\nuniform float blueX;\r\nuniform float blueY;\r\nuniform float redPop;\r\nuniform float redX;\r\nuniform float redY;\r\nuniform float pbluePop;\r\nuniform float pblueX;\r\nuniform float pblueY;\r\nuniform float predPop;\r\nuniform float predX;\r\nuniform float predY;\r\nfloat distSquared( vec2 A, vec2 B )\r\n{\r\n    vec2 C = A - B;\r\n    return dot( C, C );\r\n}\r\n\r\nvoid main() {\r\n  vec2 bluePos = vec2(blueX, 1.0-blueY);\r\n  vec2 redPos = vec2(redX, 1.0-redY);\r\n  vec2 pBluePos = vec2(pblueX, 1.0-pblueY);\r\n  vec2 pRedPos = vec2(predX, 1.0-predY);\r\n  \r\n  float blueScore = bluePop/400.0 - distSquared(bluePos, uv);\r\n  float redScore = redPop/400.0 - distSquared(redPos, uv);\r\n  float pBlueScore = pbluePop/400.0 - distSquared(pBluePos, uv);\r\n  float pRedScore = predPop/400.0 - distSquared(pRedPos, uv);\r\n  \r\n  bool blueWins = blueScore > 0.0 && blueScore > redScore ;\r\n  bool redWins = redScore > 0.0 && blueScore < redScore ;\r\n  bool pBlueWins = pBlueScore > 0.0 && pBlueScore > pRedScore;\r\n  bool pRedWins = pRedScore > 0.0 && pBlueScore < redScore ;\r\n  \r\n  bool noWins = !blueWins && !redWins && !pBlueWins && !pRedWins;\r\n  \r\n  vec3 redColor = vec3(0.8,0.1,0.1);\r\n  vec3 blueColor = vec3(0.15,0.15,0.8);\r\n  vec3 grayColor = vec3(.7,0.7,0.7);\r\n  \r\n  vec3 col = (redWins||pRedWins) && !pBlueWins ? redColor :\r\n           (blueWins||pBlueWins) && !pRedWins  ? blueColor :\r\n           grayColor;\r\n    \r\n  vec3 gains = (!redWins && pRedWins) || (!blueWins && pBlueWins) ? vec3(0.2) : vec3(0);\r\n vec3 losses = (redWins && !pRedWins) || (blueWins && !pBlueWins) ? vec3(0.2) : vec3(0);\r\n  \r\n  gl_FragColor = vec4(col + gains - losses , 1.0);\r\n}`\r\n  }\r\n});\r\n\r\ntype BackgroundProps = {\r\n    blueX: number,\r\n    blueY:number,\r\n    bluePop:number,\r\n    redX:number,\r\n    redY:number,\r\n    redPop:number,\r\n    pblueX: number,\r\n    pblueY:number,\r\n    pbluePop:number,\r\n    predX:number,\r\n    predY:number,\r\n    predPop:number,\r\n}\r\n\r\nconst Background = (props:BackgroundProps) => {\r\n    const { blueX, redPop, redX, bluePop, blueY, redY,\r\n    pblueX, predPop, predX, pbluePop, pblueY, predY} = props;\r\n    return <>\r\n        <img src={bg} style={{position:'absolute'}}/>\r\n        <Surface width={500} height={500} style={{mixBlendMode:'multiply'}}>\r\n        <Node shader={shaders.helloBlue} uniforms={{\r\n            blueX:blueX/2 + 0.5,\r\n            blueY:blueY/2 + 0.5,\r\n            bluePop:bluePop,\r\n            redX:redX/2 + 0.5,\r\n            redY:redY/2 + 0.5,\r\n            redPop:redPop,\r\n            pblueX:pblueX/2 + 0.5,\r\n            pblueY:pblueY/2 + 0.5,\r\n            pbluePop:pbluePop,\r\n            predX:predX/2 + 0.5,\r\n            predY:predY/2 + 0.5,\r\n            predPop:predPop,\r\n        }} />\r\n    </Surface>\r\n    </>\r\n  }\r\n\r\nclass AnimatedBackground extends React.Component<BackgroundProps> {\r\n  render() {\r\n   return  <TransitionProps\r\n       component={Background}\r\n       propList={['blueX', 'blueY', 'bluePop', 'redX', 'redY', 'redPop', 'pblueX', 'pblueY', 'pbluePop', 'predX', 'predY', 'predPop']}\r\n       blueX={this.props.blueX}\r\n       blueY={this.props.blueY}\r\n       bluePop={this.props.bluePop}\r\n       redX={this.props.redX}\r\n       redY={this.props.redY}\r\n       redPop={this.props.redPop}\r\n       pblueX={this.props.pblueX}\r\n       pblueY={this.props.pblueY}\r\n       pbluePop={this.props.pbluePop}\r\n       predX={this.props.predX}\r\n       predY={this.props.predY}\r\n       predPop={this.props.predPop}\r\n   />\r\n  }\r\n}\r\n\r\ntype VoteBarsProps = {\r\n    redVotes: number,\r\n    blueVotes:number,\r\n}\r\nconst VoteBars = ({redVotes, blueVotes}:VoteBarsProps)=><div style={{display: 'flex', width: 200}}>\r\n    <div style={{flexGrow:blueVotes, background:'blue', ...VOTES_BAR_STYLE}}>{Math.round(blueVotes)}</div>\r\n    <div style={{flexGrow:redVotes, background:'red', ...VOTES_BAR_STYLE}}>{Math.round(redVotes)}</div>\r\n</div>\r\n\r\nconst DemographicDisplay:React.FunctionComponent<DemographicDisplayProps> = props=>{\r\n    const {gamestate:{playerOne, playerTwo}, onChoiceClick, game} = props;\r\n    const votes = props.game.getVotes(props.gamestate);\r\n    const isChoosingPlayer = game.getActiveActionChoice(props.gamestate)?.constructor === ChooseAPlayer;\r\n    const isChoosingExtreme = game.getActiveActionChoice(props.gamestate)?.constructor === ChooseAnExtreme;\r\n\r\n    const bluePlayer =\r\n            <DelayHover\r\n                delay={400}\r\n                handleHoverTrigger={()=>{\r\n                    if(isChoosingPlayer){\r\n                        props.setPreview({type:'choice', choice:1})\r\n                    }\r\n                }}\r\n                handleHoverCancel={()=>{\r\n                    props.setPreview()\r\n                }}\r\n              >\r\n                <div\r\n                    className={isChoosingPlayer ? 'glow' : ''}\r\n                    style={{...PLAYER_STYLE, background:'blue', transform:coordsToTransform(props.gamestate.playerOne.position)}}\r\n                    onClick={()=>isChoosingPlayer && onChoiceClick({type:'choice', choice:1})}\r\n                />\r\n            </DelayHover>\r\n    const redPlayer =\r\n            <DelayHover\r\n                delay={400}\r\n                handleHoverTrigger={()=>{\r\n                    if(isChoosingPlayer){\r\n                        props.setPreview({type:'choice', choice:2})\r\n                    }\r\n                }}\r\n                handleHoverCancel={()=>{\r\n                    props.setPreview()\r\n                }}\r\n              >\r\n                <div\r\n                    className={isChoosingPlayer ? 'glow' : ''}\r\n                    style={{...PLAYER_STYLE, background:'red', transform:coordsToTransform(props.gamestate.playerTwo.position)}}\r\n                    onClick={()=>isChoosingPlayer && onChoiceClick({type:'choice', choice:2})}\r\n                />\r\n            </DelayHover>\r\n\r\n    return <div style={{display:'flex', justifyContent:'space-evenly'}}>\r\n            <div style={COMPASS_STYLE}>\r\n            <AnimatedBackground\r\n                bluePop={playerOne.popularity}\r\n                blueX={playerOne.position.x}\r\n                blueY={playerOne.position.y}\r\n                redPop={playerTwo.popularity}\r\n                redX={playerTwo.position.x}\r\n                redY={playerTwo.position.y}\r\n                pbluePop={props.previewState ? props.previewState.playerOne.popularity : playerOne.popularity}\r\n                pblueX={props.previewState ? props.previewState.playerOne.position.x : playerOne.position.x}\r\n                pblueY={props.previewState ? props.previewState.playerOne.position.y : playerOne.position.y}\r\n                predPop={props.previewState ? props.previewState.playerTwo.popularity : playerTwo.popularity}\r\n                predX={props.previewState ? props.previewState.playerTwo.position.x : playerTwo.position.x}\r\n                predY={props.previewState ? props.previewState.playerTwo.position.y : playerTwo.position.y}\r\n            />\r\n                {bluePlayer}\r\n                {redPlayer}\r\n            {(['playerOne', 'playerTwo'] as ('playerOne'|'playerTwo')[]).map((playerKey)=><div\r\n                style={{...PLAYER_STYLE,\r\n                    borderColor:'white',\r\n                    pointerEvents: 'none',\r\n                    opacity: (props.previewState &&\r\n                        (props.previewState[playerKey].position.x != props.gamestate[playerKey].position.x || props.previewState[playerKey].position.y != props.gamestate[playerKey].position.y)) ?\r\n                        1 : 0,\r\n                    transform:props.previewState ? coordsToTransform(props.previewState[playerKey].position) : coordsToTransform(props.gamestate[playerKey].position)\r\n                }}\r\n            />)}\r\n            {props.gamestate.demographics.map(({x,y}, i)=>{\r\n                const vote = props.game.getDemographicVote(props.gamestate, {x,y})\r\n                const background = vote === 1 ? 'blue' :\r\n                                    vote ===2 ? 'red' :\r\n                                        'gray';\r\n                const positionStyling:CSSProperties = {\r\n                    transform: coordsToTransform({x,y}),\r\n                    background\r\n                }\r\n                const preview = props.previewState?.demographics[i];\r\n                const ghostStyling:CSSProperties = {\r\n                    transform: preview ? coordsToTransform(preview) : positionStyling.transform,\r\n                    opacity: preview && (preview.x !== x || preview.y !== y) ? .5 : 0,\r\n                    borderColor:'white',\r\n                    background\r\n                }\r\n                return <>\r\n                     <div style={{...DEMOGRAPHIC_STYLE, ...positionStyling}} key={i}/>\r\n                    <div style={{...DEMOGRAPHIC_STYLE,  ...ghostStyling}} key={`${i}_preview`}/>\r\n                </>\r\n            })}\r\n            {isChoosingExtreme && Object.entries(EXTREMES).map(([extreme, point])=>\r\n                 <DelayHover\r\n                delay={400}\r\n                handleHoverTrigger={()=>{\r\n                    props.setPreview({type:'choice', choice:ID_BY_EXTREME[extreme]})\r\n                }}\r\n                handleHoverCancel={()=>{\r\n                    props.setPreview()\r\n                }}\r\n              >\r\n                <div\r\n                    className={'glow'}\r\n                    onClick={()=>onChoiceClick({type:'choice', choice:ID_BY_EXTREME[extreme]})}\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        backgroundColor: 'rgba(255, 128, 0, 0.5)',\r\n                        top: -75,\r\n                        left: -75,\r\n                        width: 150,\r\n                        height: 150,\r\n                        borderRadius: 500,\r\n                        transform:coordsToTransform(point)\r\n                    }}\r\n                />\r\n                 </DelayHover>\r\n            )}\r\n        </div>\r\n            <div style={{textAlign:'center'}}>\r\n                Election in\r\n                <div style={{fontSize:'150%', fontWeight:'bold'}}>\r\n                    {props.gamestate.roundsUntilElection}\r\n                </div>\r\n                Rounds\r\n                <div>\r\n                    {props.gamestate.cardPlayedThisTurn ? 'Card has been Played this turn' : '-'}\r\n                </div>\r\n                <div>\r\n                    {props.gamestate.endRoundAfterThisTurn ? 'Round will end if turn ended now' : '-'}\r\n                </div>\r\n                <TransitionProps\r\n                    component={VoteBars}\r\n                    propList={['blueVotes', 'redVotes']}\r\n                    blueVotes={votes[1]||0}\r\n                    redVotes={votes[2]||0}\r\n                />\r\n            </div>\r\n    </div>\r\n};\r\n\r\nexport default DemographicDisplay;","import {Card} from \"../cardgame/Card\";\r\nimport React, {CSSProperties} from \"react\";\r\nimport { usePopperTooltip } from \"react-popper-tooltip\";\r\nimport \"react-popper-tooltip/dist/styles.css\";\r\n\r\ntype CardPileProps = {\r\n    label: string,\r\n    cards:(Card|'?')[],\r\n}\r\n\r\nconst PILE_STYLE:CSSProperties = {\r\n    border: '1px solid black',\r\n    fontSize: 10,\r\n    borderRadius: 3,\r\n    width: 40,\r\n    height: 60,\r\n    margin: 5,\r\n    display: 'inline-block'\r\n}\r\nconst CARD_LIST_STYLE:CSSProperties = {\r\n    maxHeight: 200,\r\n    fontSize: 10,\r\n    textAlign: 'left',\r\n    width: 150,\r\n    overflowY: 'auto'\r\n}\r\n\r\nconst CardPile:React.FunctionComponent<CardPileProps> = props=>{\r\n    const {\r\n        label,\r\n        cards\r\n    } = props;\r\n        const {\r\n    getArrowProps,\r\n    getTooltipProps,\r\n    setTooltipRef,\r\n    setTriggerRef,\r\n    visible\r\n  } = usePopperTooltip({ interactive: true, delayHide: 100 });\r\n\r\n    return <>\r\n            <div style={PILE_STYLE} ref={setTriggerRef}>\r\n                {label}\r\n                <div>{cards.length}</div>\r\n            </div>\r\n         {visible && (\r\n          <div\r\n            ref={setTooltipRef}\r\n            {...getTooltipProps({ className: \"tooltip-container\" })}\r\n          >\r\n              {cards.length===0 && <i>Empty</i>}\r\n              <ul style={CARD_LIST_STYLE}>\r\n                  {cards.map((card, i)=><li key={i}>\r\n                      <b>{typeof card === 'string' ? card : card.getName()}</b>\r\n                      {' '}\r\n                        {typeof card !== 'string' && card.getText()}\r\n                  </li>)}\r\n              </ul>\r\n            <div {...getArrowProps({ className: \"tooltip-arrow\" })} />\r\n          </div>\r\n        )}\r\n        </>\r\n}\r\n\r\nexport default CardPile;","import CardGame, {CardGameChoiceMove, CardGameMove, CardGamePlayerState, CardGameState} from \"../cardgame/CardGame\";\r\nimport React, {CSSProperties, FunctionComponent, useEffect} from \"react\";\r\nimport CardDisplay  from \"./CardDisplay\";\r\nimport DemographicDisplay from \"./DemographicDisplay\";\r\n\r\nimport _ from 'lodash'\r\n\r\nimport FlipMove from 'react-flip-move';\r\nimport CardPile from \"./CardPile\";\r\nimport ChoiceArrow from \"./ChoiceArrow\";\r\nimport {ChoiceActionCard} from \"../cardgame/Card\";\r\n\r\ntype GameBoardProps = {\r\n    gamestate: CardGameState;\r\n    game: CardGame,\r\n    lastmove: CardGameMove;\r\n    previewState?: CardGameState;\r\n    onCardClick: (n:number)=>void;\r\n    setPreview: (move?:CardGameMove)=>void,\r\n    onChoiceClick: (move:CardGameChoiceMove)=>void\r\n\r\n}\r\ntype PlayerDisplayProps = {\r\n    isHidden: boolean;\r\n    isActive: boolean;\r\n    lastmove?: CardGameMove;\r\n    player: CardGamePlayerState;\r\n    gamestate: CardGameState;\r\n    game: CardGame;\r\n    onCardClick: (n:number)=>void;\r\n    setPreview: (move?:CardGameMove)=>void,\r\n}\r\n\r\nconst WRAPPER_STYLE:CSSProperties = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    placeContent: 'center',\r\n}\r\n\r\nconst ACTIVE_WRAPPER_STYLE = {\r\n    ...WRAPPER_STYLE,\r\n    background: 'gold',\r\n}\r\n\r\nconst HAND_STYLE = {\r\n    display: 'inline-flex',\r\n    minWidth: 400,\r\n    justifyContent:'center'\r\n}\r\nconst HEALTH_WRAPPER_STYLE:CSSProperties = {\r\n    fontSize: 60,\r\n    position: \"relative\",\r\n}\r\nconst HEALTH_STYLE:CSSProperties = {\r\n    position: \"absolute\",\r\n    bottom:25,\r\n    left: 18,\r\n    width: 20,\r\n    fontSize: 16,\r\n    color: \"white\",\r\n    textAlign: 'center'\r\n}\r\n\r\nconst PLAYER_BOARD_STYLE:CSSProperties = {\r\n    height: 200,\r\n    display: 'flex',\r\n    justifyContent:'center',\r\n    alignItems: 'center',\r\n    placeContent: 'center',\r\n\r\n}\r\n\r\nconst PlayerDisplay:FunctionComponent<PlayerDisplayProps> = ({onCardClick, setPreview, game, player, isActive, isHidden, lastmove, gamestate})=>{\r\n    const cardsBeingPlayed = lastmove && lastmove.type === 'play' ? [lastmove.cardNumber] : []\r\n\r\n    const displayHand = [...player.hand, ...cardsBeingPlayed].sort((a,b)=>a-b);\r\n\r\n    const board = <div >\r\n        <FlipMove style={{...PLAYER_BOARD_STYLE}}>\r\n            {player.board.map(n=><div key={n+' '+game.cardIndex[n].getName()}>\r\n                <CardDisplay\r\n                    onClick={()=>{}}\r\n                    setPreview={()=>{}}\r\n                    isOpponent={isHidden}\r\n                    isHidden={false}\r\n                    card={game.cardIndex[n]}\r\n                    canBePlayed={false}\r\n                    canBeDiscarded={false}\r\n                    beingPlayed={false}\r\n                    onBoard={true}\r\n                />\r\n            </div>)}\r\n        </FlipMove>\r\n    </div>\r\n\r\n    return <div style={isActive ? ACTIVE_WRAPPER_STYLE : WRAPPER_STYLE}>\r\n            <div style={HEALTH_WRAPPER_STYLE}>\r\n                ❤\r\n               <div style={HEALTH_STYLE}>\r\n                {player.popularity}\r\n            </div>\r\n            </div>\r\n            <FlipMove style={{...HAND_STYLE}}>\r\n                {displayHand.map(n=><div key={n+' '+game.cardIndex[n].getName()} style={{position: 'relative'}}>\r\n                    <CardDisplay\r\n                        onClick={()=>onCardClick(n)}\r\n                        setPreview={setPreview}\r\n                        isOpponent={isHidden}\r\n                        isHidden={isHidden && !cardsBeingPlayed.includes(n)}\r\n                        card={game.cardIndex[n]}\r\n                        canBePlayed={isActive && !isHidden && gamestate.step === 'play' && !cardsBeingPlayed.includes(n)}\r\n                        canBeDiscarded={isActive && !isHidden && gamestate.step === 'draw' && !cardsBeingPlayed.includes(n)}\r\n                        beingPlayed={cardsBeingPlayed.includes(n)}\r\n                        onBoard={player.board.includes(n)}\r\n                    />\r\n                </div>)}\r\n            </FlipMove>\r\n            <CardPile\r\n                label=\"deck\"\r\n                cards={player.deck.map(n=>isHidden ? '?' : game.cardIndex[n] )}\r\n            />\r\n            <CardPile\r\n                label=\"discard\"\r\n                cards={player.discardPile.map(n=>game.cardIndex[n])}\r\n            />\r\n        </div>\r\n}\r\n\r\nconst GameBoard:FunctionComponent<GameBoardProps> = (props)=>{\r\n    const {gamestate, game, lastmove, onCardClick, onChoiceClick, setPreview, previewState} = props;\r\n    return <>\r\n        <div>\r\n            Step: {gamestate.step}\r\n        </div>\r\n        <PlayerDisplay onCardClick={()=>{}} setPreview={()=>{}} game={game} gamestate={gamestate} player={gamestate.playerTwo} lastmove={gamestate.activePlayer === 2 ? lastmove: undefined} isActive={gamestate.activePlayer === 2} isHidden={true}/>\r\n        <DemographicDisplay\r\n            gamestate={gamestate}\r\n            game={game}\r\n            previewState={previewState}\r\n            onChoiceClick={onChoiceClick}\r\n            setPreview={setPreview}\r\n        />\r\n        <PlayerDisplay onCardClick={onCardClick} setPreview={setPreview} game={game} gamestate={gamestate} player={gamestate.playerOne} lastmove={gamestate.activePlayer === 1 ? lastmove: undefined} isActive={gamestate.activePlayer === 1} isHidden={false}/>\r\n    </>\r\n}\r\n\r\nexport default GameBoard;","\r\n// @ts-ignore\r\n// eslint-disable-next-line\r\nimport Worker from 'comlink-loader!./worker'; // inline loader\r\n\r\nexport default Worker;","import React, {useMemo} from 'react';\nimport './App.css';\nimport {Card} from \"./cardgame/Card\";\nimport loadExampleDeck from \"./cardgame/Data/ExampleDecks\";\nimport CardGame, {CardGameChain, CardGameMove, CardGameState} from \"./cardgame/CardGame\";\nimport {GameStatus} from \"./MCTS/mcts\";\nimport GameBoard from \"./client/GameBoard\";\nimport setupEffects from \"./cardgame/Components/setup\";\nimport Worker from \"./client/worker\";\nimport delay from \"delay\";\nimport {WorkerResponse} from \"./client/worker/worker\";\n\ntype CombinedGameState = {\n    state: CardGameState,\n    lastMove?: CardGameChain\n}\n\nfunction getMoveFromCardClick(gamestate:CardGameState, cardNumber:number):CardGameMove{\n    if(gamestate.step=='draw')return {type:'discard', cardNumber}\n    else return {type:'play', cardNumber}\n}\n\nconst worker = new Worker();\n\nfunction App() {\n    setupEffects();\n  const cardIndex:Record<number, Card> = useMemo(()=>loadExampleDeck(), []);\n  const game = useMemo(()=>new CardGame(cardIndex), [cardIndex]);\n\n  const [combinedGameState, setCombinedGameState] = React.useState<CombinedGameState>({\n      state: game.newGame()\n  });\n  const status = useMemo(()=>game.getStatus(combinedGameState.state),[game, combinedGameState.state])\n\n  const [mood, setMood] = React.useState('...');\n  const [previewState, setPreviewState] = React.useState<CardGameState|undefined>()\n\n    const [isLoading, setIsLoading] = React.useState(false);\n\n    React.useEffect(()=>{\n        let nextTimeout:number = 0;\n        const loop = async ()=>{\n            if(combinedGameState.state.activePlayer === 2 && !isLoading && game.getStatus(combinedGameState.state) === GameStatus.IN_PLAY){\n                setIsLoading(true)\n                const delay_time = (combinedGameState.lastMove as CardGameMove)?.type === 'end' ? 400 : 1000;\n                const [{mood, move}]:[WorkerResponse, void] = await Promise.all([worker.processData(combinedGameState.state), delay(delay_time)])\n                const newState = game.applyMoveChain(combinedGameState.state, move);\n                setMood(mood)\n                setIsLoading(false)\n                setPreviewState(undefined)\n                setCombinedGameState({\n                    state:newState,\n                    lastMove: Array.isArray(move) ? move[0] : move\n                })\n            }\n        }\n        nextTimeout = window.setTimeout(loop,0);\n        return ()=>window.clearTimeout(nextTimeout);\n    },[combinedGameState, game, isLoading])\n    const lastmove  = (Array.isArray(combinedGameState.lastMove)?combinedGameState.lastMove[0] : combinedGameState.lastMove )||{type:'end'}\n    const canEndTurn = game.getValidMoves(combinedGameState.state).find(m=>!Array.isArray(m) && m.type===\"end\");\n\n  return (\n    <div className=\"App\">\n        {status !== GameStatus.IN_PLAY && <h1>{status}</h1>}\n      <GameBoard\n          gamestate={combinedGameState.state}\n          game={game}\n          lastmove={lastmove}\n          previewState={previewState}\n          onCardClick={(n)=>{\n              if(status !== GameStatus.IN_PLAY)return;\n              const move = getMoveFromCardClick(combinedGameState.state,n)\n              const newState = game.applyMove(combinedGameState.state, move);\n              setPreviewState(undefined)\n            setCombinedGameState({\n                state:newState,\n                lastMove: move\n            })\n          }}\n          onChoiceClick={(move)=>{\n              if(status !== GameStatus.IN_PLAY)return;\n              const newState = game.applyMove(combinedGameState.state, move);\n              setPreviewState(undefined)\n            setCombinedGameState({\n                state:newState,\n                lastMove: move\n            })\n          }}\n          setPreview={move=>setPreviewState( move && game.applyMove(combinedGameState.state, move))}\n      />\n\n      <button\n          disabled={status!==GameStatus.IN_PLAY || combinedGameState.state.activePlayer === 2 || !canEndTurn}\n          onClick={()=>{\n              const move:CardGameMove = {type:\"end\"}\n              const newState = game.applyMove(combinedGameState.state, move);\n            setCombinedGameState({\n                state:newState,\n                lastMove: move\n            })\n          }}\n      >\n          {combinedGameState.state.endRoundAfterThisTurn ? 'End Round' : 'End Turn'}\n      </button>\n\n        <div>\n            {mood}\n        </div>\n        {isLoading && 'loading'}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","var wrap = require('comlink').wrap,Worker = require(\"!worker-loader?{}!C:/Users/Kai/PycharmProjects/mcts/card-game-ai/node_modules/comlink-loader/dist/comlink-worker-loader.js!C:\\\\Users\\\\Kai\\\\PycharmProjects\\\\mcts\\\\card-game-ai\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js??ref--5-oneOf-2!C:\\\\Users\\\\Kai\\\\PycharmProjects\\\\mcts\\\\card-game-ai\\\\src\\\\client\\\\worker\\\\worker.ts\"),inst;module.exports = function f() {if (this instanceof f) return wrap(Worker());return inst || (inst = wrap(Worker()));};"],"sourceRoot":""}