{"version":3,"sources":["cardgame/TextTemplate.ts","cardgame/Components/Effects/ListEffect.ts","cardgame/Components/Effects/RandomTransferEffect.ts","cardgame/Components/Effects/ChangeHealthEffect.ts","MCTS/mcts.ts","cardgame/Components/Effects/setup.ts","cardgame/Card.ts","cardgame/Data/ExampleDecks.ts","cardgame/CardGame.ts","client/CardDisplay.tsx","client/CardPile.tsx","client/GameBoard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TextTemplate","slot","template","factory","regex","slots","this","RegExp","replace","matchAll","map","match","templates","push","text","candidates","filter","toLowerCase","length","Error","errors","results","matches","subTexts","splice","args","i","parse","e","x","result","Eff","Player","N","ListEffect","a","b","state","playerKey","afterA","applyEffect","RandomTransferEffect","target","from","to","targetKey","resolvePlayerKey","player","fromPile","toPile","drawIndex","Math","floor","random","DrawCardEffect","resolveSelf","ChangeHealthEffect","amount","health","GameStatus","_","resolveOpponent","n","numberToWords","toWords","Card","cardNumber","hand","indexOf","discardPile","activePlayer","afterPreEffect","preEffect","afterEffect","postEffect","EffectCard","effect","name","cardText","promptSync","getPlayerGoal","WIN","LOSE","RandomStrategy","mood","game","sensibleMove","sample","getSensibleMoves","validMove","getValidMoves","MCTSStrategy","samples","depth","inPlayHeuristic","simulationStrategy","evaluations","move","score","outOf","unfinished","playerGoal","forEach","evaluation","stateWithScrambledUnknowns","randomizeHiddenInfo","newState","applyMove","simulation","simulateGame","status","DRAW","IN_PLAY","undefined","heuristic","desire","highestEval","maxBy","highestScore","bestMoves","minBy","JSON","stringify","toFixed","goal","curState","getStatus","pickMove","message","includes","CardGame","cardIndex","deckOne","deckTwo","Object","keys","parseInt","type","applyEndMove","applyCardPlay","applyCardDiscard","p1Dead","playerOne","deck","p2Dead","playerTwo","step","getDiscardMoves","getCardMoves","newPlayer","board","preGame","console","log","chalk","white","blue","red","opponentKey","play","bluePoints","max","redPoints","CARD_STYLE","position","backgroundColor","border","fontSize","borderRadius","width","height","margin","top","display","transition","cursor","overflow","zIndex","CARD_TITLE_STYLE","fontWeight","BEING_PLAYED_CARD_STYLE","color","borderColor","transform","marginLeft","marginRight","CAN_BE_DISCADED_STYLE","borderWidth","CAN_BE_PLAYED_STYLE","MOVE_DOWN_STYLE","MOVE_UP_STYLE","HIDDEN_STYLING","CardDisplay","props","card","beingPlayed","situationalStyle","canBeDiscarded","canBePlayed","positionStyling","isOpponent","hiddenStyling","isHidden","onClick","style","getName","getText","PILE_STYLE","CARD_LIST_STYLE","maxHeight","textAlign","overflowY","CardPile","label","cards","usePopperTooltip","interactive","delayHide","getArrowProps","getTooltipProps","setTooltipRef","setTriggerRef","visible","ref","className","WRAPPER_STYLE","alignItems","placeContent","ACTIVE_WRAPPER_STYLE","background","HAND_STYLE","minWidth","justifyContent","HEALTH_WRAPPER_STYLE","HEALTH_STYLE","bottom","left","PlayerDisplay","onCardClick","isActive","lastmove","gamestate","React","useState","showingTempCards","cardsBeingPlayed","displayHand","sort","GameBoard","App","useMemo","setup","playerStrat","greedyStrat","gs","getHeuristic","opponentStrat","newGame","setGamestate","NaN","t","setT","setMood","setLastMove","getMoveFromCardClick","disabled","performance","now","strat","find","m","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cb49a22.chunk.js","sourcesContent":["import {CardGameState} from \"./CardGame\";\r\nimport {PlayerKey} from \"./Card\";\r\n\r\ntype Component = ResolveSlot<any>\r\ntype GetSlot<T extends Component> = T extends ResolveSlot<infer R> ? R : any;\r\ntype Slot = 'Eff'|'Player'|'N'\r\ntype ResolveSlot<SLOT extends Slot> = SLOT extends 'Eff' ? Effect\r\n                                    : SLOT extends 'Player' ? PlayerTarget\r\n                                    : SLOT extends 'N' ? number\r\n                                    : never;\r\n\r\n\r\nexport type Resolver<T> = {\r\n   resolvePlayerKey(state:CardGameState, playerKey:PlayerKey):T;\r\n}\r\n\r\nexport type PlayerTarget = Resolver<PlayerKey>\r\n\r\nexport interface Effect{\r\n  applyEffect(state:CardGameState, playerKey:PlayerKey):CardGameState;\r\n}\r\n\r\nexport default class TextTemplate<T extends Component, ARGS extends Component[]>{\r\n  template: string;\r\n  regex: RegExp;\r\n  slots: Slot[];\r\n  factory:(...args:ARGS)=>T;\r\n\r\n  static templates:{\r\n    [S in Slot]: TextTemplate<ResolveSlot<S>, Component[]>[]\r\n  } = {\r\n    Eff: [],\r\n    Player: [],\r\n    N:[]\r\n  }\r\n\r\n  constructor(slot: GetSlot<T>, template:string, factory:(...args:ARGS)=>T){\r\n    this.template = template;\r\n    this.regex = new RegExp('^'+template.replace(/%\\w+/g, '(.+)?')+'$');\r\n    this.factory = factory;\r\n    this.slots = [...this.template.matchAll(/%(\\w+)/gi)].map(match=>match[1]) as Slot[]\r\n    TextTemplate.templates[slot].push(this as any);\r\n  }\r\n\r\n  static parse<SLOT extends Slot>(slot: SLOT, text:string):ResolveSlot<SLOT>{\r\n    const templates = TextTemplate.templates[slot] as TextTemplate<ResolveSlot<SLOT>, Component[]>[];\r\n    if(text === undefined){\r\n      debugger\r\n    }\r\n    const candidates = templates.filter((template:TextTemplate<Component, Component[]>) => text.toLowerCase().match(template.regex));\r\n    if(candidates.length === 0) throw new Error(`Invalid text for slot ${slot}: ${text}`);\r\n    const errors:Error[] = [];\r\n    const results = candidates.map((template:TextTemplate<Component, Component[]>)=>{\r\n      try{\r\n        const matches = text.toLowerCase().match(template.regex);\r\n        const subTexts = matches ? matches.splice(1) : [];\r\n        const args = template.slots.map((slot, i)=>{\r\n          return TextTemplate.parse(slot, subTexts[i])\r\n        })\r\n        return template.factory(...args as any) as unknown as ResolveSlot<SLOT>;\r\n      }catch(e){\r\n        errors.push(e);\r\n        return undefined;\r\n      }\r\n    }).filter(x=>x);\r\n    if(results.length === 0){\r\n      if(errors.length > 1){\r\n        throw new Error(\"Invalid text: \"+text);\r\n      }else{\r\n        throw errors[0];\r\n      }\r\n    }\r\n    // TODO: select by shortest depth\r\n    const [result] = results;\r\n    if(!result){\r\n      throw Error()\r\n    }\r\n    return result;\r\n  }\r\n}","import TextTemplate, {Effect} from \"../../TextTemplate\";\r\nimport {CardGameState} from \"../../CardGame\";\r\nimport {PlayerKey} from \"../../Card\";\r\n\r\nclass ListEffect implements Effect{\r\n    a:Effect;\r\n    b:Effect;\r\n    constructor(a:Effect, b:Effect) {\r\n        this.a = a;\r\n        this.b = b;\r\n    }\r\n    applyEffect(state: CardGameState, playerKey:PlayerKey): CardGameState {\r\n        const afterA = this.a.applyEffect(state, playerKey);\r\n        return this.b.applyEffect(afterA, playerKey);\r\n    }\r\n}\r\n\r\nexport default function setup(){\r\n    new TextTemplate('Eff', '%Eff and %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n    new TextTemplate('Eff', '%Eff, and %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n    new TextTemplate('Eff', '%Eff, %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n    new TextTemplate('Eff', '%Eff then %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n    new TextTemplate('Eff', '%Eff, then %Eff', (a:Effect, b:Effect)=>new ListEffect(a,b));\r\n}","import TextTemplate, {Effect, PlayerTarget} from \"../../TextTemplate\";\r\nimport {CardGamePlayerState, CardGameState} from \"../../CardGame\";\r\nimport {PlayerKey} from \"../../Card\";\r\nimport {resolveSelf} from \"./setup\";\r\n\r\ntype KeysMatching<T, V> = {[K in keyof T]-?: T[K] extends V ? K : never}[keyof T];\r\n\r\nclass RandomTransferEffect implements Effect{\r\n    target:PlayerTarget\r\n    from:KeysMatching<CardGamePlayerState, readonly number[]>;\r\n    to:KeysMatching<CardGamePlayerState, readonly number[]>;\r\n    constructor(target:PlayerTarget, from:KeysMatching<CardGamePlayerState, readonly number[]>, to:KeysMatching<CardGamePlayerState, readonly number[]>) {\r\n        this.target = target;\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n\r\n    applyEffect(state: CardGameState, playerKey:PlayerKey): CardGameState {\r\n        const targetKey = this.target.resolvePlayerKey(state, playerKey);\r\n        const player = state[targetKey];\r\n        const fromPile = [...player[this.from]];\r\n        const toPile = [...player[this.to]];\r\n        const drawIndex = Math.floor(Math.random() * fromPile.length);\r\n        toPile.push(...fromPile.splice(drawIndex, 1))\r\n        return {\r\n            ...state,\r\n            [targetKey]:{\r\n                ...player,\r\n                [this.to]:toPile,\r\n                [this.from]:fromPile\r\n            }\r\n        }\r\n    }\r\n}\r\nclass DrawCardEffect extends RandomTransferEffect{\r\n    constructor(target?:PlayerTarget) {\r\n        super(target || resolveSelf,'deck', 'hand');\r\n    }\r\n}\r\n\r\nexport default function setup(){\r\n    new TextTemplate('Eff', '%Player draws? a card', (target:PlayerTarget)=>new DrawCardEffect(target));\r\n\r\n    new TextTemplate('Eff', 'draw a card', ()=>new DrawCardEffect());\r\n    new TextTemplate('Eff', 'draw the top card of your deck', ()=>new DrawCardEffect());\r\n    new TextTemplate('Eff', 'draw a card from your deck', ()=>new DrawCardEffect());\r\n\r\n    new TextTemplate('Eff', 'discard a random card(?: from your hand)', ()=>new RandomTransferEffect(resolveSelf, 'hand','discardPile'));\r\n    new TextTemplate('Eff', '%Player discards? a random card(?: from your hand)', (target:PlayerTarget)=>new RandomTransferEffect(target, 'hand','discardPile'));\r\n\r\n    new TextTemplate('Eff', 'discard the top card (?:from|of) your deck', ()=>new RandomTransferEffect(resolveSelf, 'deck','discardPile'));\r\n    new TextTemplate('Eff', '%Player discards? the top card (?:from|of) (?:their|your) deck', (target:PlayerTarget)=>new RandomTransferEffect(target, 'deck','discardPile'));\r\n}","import TextTemplate, {Effect, PlayerTarget} from \"../../TextTemplate\";\r\nimport {CardGameState} from \"../../CardGame\";\r\nimport {PlayerKey} from \"../../Card\";\r\n\r\nclass ChangeHealthEffect implements Effect{\r\n    target:PlayerTarget\r\n    amount:number;\r\n    constructor(target:PlayerTarget, amount:number) {\r\n        this.target=target;\r\n        this.amount=amount;\r\n    }\r\n    applyEffect(state: CardGameState, playerKey:PlayerKey): CardGameState {\r\n        const targetKey = this.target.resolvePlayerKey(state, playerKey);\r\n        return {\r\n            ...state,\r\n            [targetKey]:{\r\n                ...state[targetKey],\r\n                health:state[targetKey].health + this.amount\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default function setup(){\r\n    new TextTemplate('Eff', 'deal %N damage to %Player', (n:number, target:PlayerTarget)=>new ChangeHealthEffect(target, -n));\r\n    new TextTemplate('Eff', 'remove %N damage to %Player', (n:number, target:PlayerTarget)=>new ChangeHealthEffect(target, n));\r\n    new TextTemplate('Eff', '%Player loses? %N health', (target:PlayerTarget, n:number)=>new ChangeHealthEffect(target, -n));\r\n    new TextTemplate('Eff', '%Player gains? %N health', (target:PlayerTarget, n:number)=>new ChangeHealthEffect(target, n));\r\n}","import _ from 'lodash';\r\nimport promptSync from 'prompt-sync'\r\nconst prompt = promptSync();\r\n\r\nexport enum GameStatus{\r\n    IN_PLAY='IN_PLAY',\r\n    LOSE='RED_WIN',\r\n    WIN='BLUE_WIN',\r\n    DRAW='DRAW'\r\n}\r\n\r\nconst getPlayerGoal = (player:1|2) => player === 1 ? GameStatus.WIN : GameStatus.LOSE;\r\n\r\ninterface GameState{\r\n    activePlayer: 1|2,\r\n}\r\n\r\nexport interface Game<STATE extends GameState, T>{\r\n    newGame():STATE;\r\n     getValidMoves(state:STATE):T[];\r\n     print(state:STATE):void;\r\n     getSensibleMoves(state:STATE):T[];\r\n     randomizeHiddenInfo(state:STATE):STATE;\r\n     applyMove(state:STATE, move:T):STATE;\r\n     getStatus(state:STATE):GameStatus;\r\n}\r\n\r\nexport interface Strategy<STATE extends GameState, T>{\r\n    mood: string;\r\n    pickMove(game:Game<STATE,T>, state:STATE):T;\r\n}\r\n\r\nexport type StateFromGame<G> = G extends Game<infer U,any> ?  U : never;\r\nexport type MoveFromGame<G> = G extends Game<any, infer U> ?  U : never;\r\n\r\nexport class RandomStrategy<STATE extends GameState, T> implements Strategy<STATE, T>{\r\n    mood = \"none\";\r\n    pickMove(game:Game<STATE, T>, state: STATE): T {\r\n        const sensibleMove = _.sample(game.getSensibleMoves(state))\r\n        if (sensibleMove){\r\n            this.mood = \"Sensible\"\r\n            return sensibleMove;\r\n        }else{\r\n            this.mood = \"Not Sensible\"\r\n        }\r\n        const validMove = _.sample(game.getValidMoves(state))\r\n        if (validMove) {\r\n            return validMove;\r\n        }\r\n        throw new Error('No valid moves')\r\n    }\r\n}\r\n\r\nexport class InputStrategy<STATE extends GameState, T> implements Strategy<STATE, T> {\r\n    mood=\"player\"\r\n    transform:(str:string)=>T;\r\n    constructor(transform:(str:string)=>T) {\r\n        this.transform = transform;\r\n    }\r\n\r\n    pickMove(game: Game<STATE, T>, state: STATE): T {\r\n        game.print(state);\r\n        return this.transform(prompt(\"What's your move?\"))\r\n    }\r\n\r\n}\r\nexport class GreedyStrategy<STATE extends GameState, T> extends RandomStrategy<STATE, T> {\r\n    mood = \"greedy\"\r\n    pickMove(game: Game<STATE, T>, state: STATE): T {\r\n        const playerGoal = getPlayerGoal(state.activePlayer);\r\n        const winningMove = game.getValidMoves(state).find(move=>game.getStatus(game.applyMove(state,move)) === playerGoal)\r\n        if(winningMove) {\r\n            return winningMove;\r\n        }\r\n        return super.pickMove(game, state);\r\n    }\r\n}\r\n\r\nexport class MCTSStrategy<STATE extends GameState, T>implements Strategy<STATE, T>{\r\n    mood = \"waiting...\"\r\n    simulationStrategy: Strategy<STATE, T>;\r\n    samples:number;\r\n    depth:number;\r\n    inPlayHeuristic:(state:STATE)=>number;\r\n\r\n    constructor(samples=60, depth=100, inPlayHeuristic: (state:STATE)=>number = ()=>0, simulationStrategy:Strategy<STATE, T> = new RandomStrategy()) {\r\n        this.simulationStrategy = simulationStrategy;\r\n        this.depth = depth;\r\n        this.samples = samples;\r\n        this.inPlayHeuristic = inPlayHeuristic;\r\n    }\r\n\r\n    pickMove(game:Game<STATE, T>, state: STATE): T {\r\n        const evaluations = game.getValidMoves(state).map(move=>({move, score:0, outOf:0, depth: 0,unfinished:0}));\r\n        if(evaluations.length === 0) throw new Error('No valid moves')\r\n        const playerGoal = getPlayerGoal(state.activePlayer);\r\n        for(let i = 0; i < this.samples; i++){\r\n            evaluations.forEach(evaluation=>{\r\n                const stateWithScrambledUnknowns = game.randomizeHiddenInfo(state);\r\n                const newState = game.applyMove(stateWithScrambledUnknowns, evaluation.move);\r\n                const simulation = this.simulateGame(game, newState) ;\r\n                evaluation.outOf++;\r\n                if(simulation.status === playerGoal){\r\n                    evaluation.score++;\r\n                }else if(simulation.status !== GameStatus.DRAW && simulation.status !== GameStatus.IN_PLAY){\r\n                    evaluation.score--;\r\n                }else if(simulation.heuristic !== undefined){\r\n                    const desire = state.activePlayer === 1 ? 1 : -1;\r\n                    evaluation.score += simulation.heuristic * desire ;\r\n                    evaluation.unfinished++;\r\n                }\r\n                evaluation.depth += simulation.length;\r\n            })\r\n        }\r\n        const highestEval =  _.maxBy(evaluations, 'score')!;\r\n        const highestScore = highestEval.score / highestEval.outOf\r\n        const bestMoves = evaluations.filter(({score,outOf})=>(score/outOf) > highestScore - 0.01)\r\n\r\n        if(highestScore > 0.9) {\r\n            const result = _.minBy(bestMoves, 'depth')!\r\n            this.mood = JSON.stringify({\r\n                score: (result.score/result.outOf).toFixed(2),\r\n                goal: 'Minimizing Length to Victory',\r\n                depth: (result.depth / result.outOf).toFixed(2),\r\n                unfinished: (result.unfinished / result.outOf).toFixed(2)\r\n            })\r\n            return result.move;\r\n        }else if(highestScore < -0.9){\r\n            const result = _.maxBy(bestMoves, 'depth')!\r\n            this.mood = JSON.stringify({\r\n                score: (result.score/result.outOf).toFixed(2),\r\n                goal: 'Delaying time till loss',\r\n                depth: (result.depth / result.outOf).toFixed(2),\r\n                unfinished: (result.unfinished / result.outOf).toFixed(2)\r\n            })\r\n            return result.move;\r\n        }else{\r\n            const result =  _.maxBy(bestMoves, 'score')!\r\n            this.mood = JSON.stringify({\r\n                score: (result.score / result.outOf).toFixed(3),\r\n                depth: (result.depth / result.outOf).toFixed(2),\r\n                unfinished: (result.unfinished / result.outOf).toFixed(2)\r\n            })\r\n            return  result.move;\r\n        }\r\n    }\r\n    simulateGame(game:Game<STATE, T>, state:STATE):{status:GameStatus, length:number, heuristic?:number}{\r\n        let curState = state;\r\n        for(let i = 0; i < this.depth; i++){\r\n            const status = game.getStatus(curState);\r\n            if(status !== GameStatus.IN_PLAY) return {status, length: i};\r\n            try{\r\n                const move = this.simulationStrategy.pickMove(game, curState);\r\n                if(!move) return {status: GameStatus.DRAW, length: i};\r\n                curState = game.applyMove(curState, move);\r\n            }catch(e){\r\n                if(e.message.includes('No valid move')) return {status: GameStatus.DRAW, length: i};\r\n                throw e;\r\n            }\r\n        }\r\n        return {status: GameStatus.IN_PLAY, length: this.depth, heuristic: this.inPlayHeuristic(curState)};\r\n    }\r\n}\r\n\r\n","import setupList from './ListEffect';\r\nimport setupDraw from './RandomTransferEffect';\r\nimport setupDamage from './ChangeHealthEffect';\r\nimport TextTemplate, {PlayerTarget} from \"../../TextTemplate\";\r\nimport {PlayerKey} from \"../../Card\";\r\nimport numberToWords from 'number-to-words';\r\n\r\nexport const resolveSelf:PlayerTarget = {\r\n    resolvePlayerKey(_, playerKey: PlayerKey):PlayerKey {\r\n        return playerKey;\r\n    }\r\n}\r\nconst resolveOpponent:PlayerTarget = {\r\n    resolvePlayerKey(_, playerKey: PlayerKey):PlayerKey {\r\n        return playerKey === 'playerOne' ? 'playerTwo' : 'playerOne';\r\n    }\r\n}\r\n\r\n\r\nexport default function () {\r\n    for(let n = 0; n < 25;n++){\r\n        new TextTemplate('N',numberToWords.toWords(n),()=>n)\r\n        new TextTemplate('N',`${n}`,()=>n)\r\n    }\r\n    new TextTemplate('Player','yourself',()=>resolveSelf)\r\n    new TextTemplate('Player','you',()=>resolveSelf)\r\n    new TextTemplate('Player','your opponent',()=>resolveOpponent)\r\n    new TextTemplate('Player','the other player',()=>resolveOpponent)\r\n    setupList();\r\n    setupDraw();\r\n    setupDamage();\r\n}","import {CardGameState} from \"./CardGame\";\r\nimport {Effect} from \"./TextTemplate\";\r\n\r\nexport type PlayerKey = 'playerOne'|'playerTwo'\r\n\r\nexport abstract class Card{\r\n    abstract getName():string;\r\n    abstract getText():string;\r\n    abstract applyEffect(state:CardGameState, playerKey:PlayerKey):CardGameState;\r\n\r\n    private preEffect(state:CardGameState, cardNumber:number, playerKey:PlayerKey):CardGameState{\r\n        const player = state[playerKey];\r\n        const hand = [...player.hand]\r\n        hand.splice(hand.indexOf(cardNumber), 1);\r\n        return {\r\n            ...state,\r\n            [playerKey]: {\r\n                ...player,\r\n                hand\r\n            }\r\n        }\r\n    }\r\n\r\n    protected postEffect(state:CardGameState, cardNumber:number, playerKey:PlayerKey):CardGameState{\r\n        return {\r\n            ...state,\r\n            [playerKey]: {\r\n                ...state[playerKey],\r\n                discardPile: [cardNumber, ...state[playerKey].discardPile]\r\n            }\r\n        }\r\n    }\r\n\r\n    play(state:CardGameState, cardNumber:number):CardGameState{\r\n        const playerKey = state.activePlayer  === 1 ? 'playerOne' : 'playerTwo';\r\n        const afterPreEffect = this.preEffect(state,cardNumber,playerKey);\r\n        const afterEffect = this.applyEffect(afterPreEffect, playerKey);\r\n        return this.postEffect(afterEffect,cardNumber,playerKey);\r\n    }\r\n}\r\n\r\nexport class EffectCard extends Card{\r\n    effect: Effect;\r\n    name: string;\r\n    text: string;\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getText(): string {\r\n        return this.text;\r\n    }\r\n    constructor(effect:Effect, text:string, name:string) {\r\n        super();\r\n        this.effect = effect;\r\n        this.text = text;\r\n        this.name = name;\r\n    }\r\n    applyEffect(state: CardGameState, playerKey:PlayerKey): CardGameState {\r\n        return this.effect.applyEffect(state, playerKey)\r\n    }\r\n}\r\n\r\nexport abstract class ItemCard extends Card{\r\n    applyEffect(state: CardGameState): CardGameState {\r\n        return state;\r\n    }\r\n\r\n    protected postEffect(state:CardGameState, cardNumber:number, playerKey:PlayerKey):CardGameState{\r\n        return {\r\n            ...state,\r\n            [playerKey]: {\r\n                ...state[playerKey],\r\n                board: [cardNumber, ...state[playerKey].board]\r\n            }\r\n        }\r\n    }\r\n    abstract getName():string;\r\n    abstract getText():string;\r\n}\r\n","import setup from '../Components/Effects/setup';\r\nimport {Card, EffectCard} from \"../Card\";\r\nimport TextTemplate from \"../TextTemplate\";\r\n\r\nconst cardText = [\r\n    'Deal one damage to your opponent',\r\n    'Deal two damage to your opponent',\r\n    'Deal three damage to your opponent and deal one damage to yourself',\r\n    'Deal one damage to yourself then draw a card',\r\n    'Deal one damage to yourself then draw a card',\r\n    'You gain one health',\r\n    'You gain one health and you draw a card',\r\n    'Your opponent discards the top card from their deck',\r\n    'Discard the top card from your deck, then you gain two health',\r\n    'Deal two damage to your opponent',\r\n    'Deal three damage to your opponent',\r\n]\r\n\r\nexport default function():Record<number, Card>{\r\n    setup()\r\n    return [...cardText,...cardText,...cardText,...cardText].map((text, i)=>{\r\n        const effect = TextTemplate.parse('Eff', text);\r\n        return new EffectCard(effect,text, `#${i}`);\r\n    })\r\n}","import {Game, GameStatus} from \"../MCTS/mcts\";\r\nimport chalk from 'chalk'\r\nimport {Card} from \"./Card\";\r\n\r\nexport interface CardGamePlayerState {\r\n    readonly health: number;\r\n    readonly hand: readonly number[];\r\n    readonly board: readonly number[];\r\n    readonly discardPile: readonly number[];\r\n    readonly deck: readonly number[];\r\n}\r\n\r\nexport interface CardGameState {\r\n    readonly activePlayer: 1|2;\r\n    readonly step: 'draw'|'play'\r\n    readonly playerOne: CardGamePlayerState\r\n    readonly playerTwo: CardGamePlayerState;\r\n    readonly log?:string[],\r\n}\r\n\r\ninterface CardGamePlayCardMove {type:\"play\"; cardNumber:number}\r\ninterface CardGameDiscardCardMove{type:\"discard\"; cardNumber:number}\r\ninterface CardGameEndMove {type:\"end\"}\r\nexport type CardGameMove = CardGameEndMove | CardGamePlayCardMove | CardGameDiscardCardMove;\r\n\r\nconst HAND_SIZE = 6;\r\n\r\nexport default class CardGame implements Game<CardGameState, CardGameMove>{\r\n\r\n    cardIndex:Record<number, Card>;\r\n    deckOne:number[];\r\n    deckTwo:number[];\r\n\r\n    constructor(cardIndex:Record<number,Card>, deckOne?:number[], deckTwo?:number[]){\r\n        this.cardIndex = cardIndex;\r\n        this.deckOne = deckOne ? deckOne : Object.keys(this.cardIndex).map(i=>parseInt(i));\r\n        this.deckTwo = deckTwo ? deckTwo : this.deckOne;\r\n    }\r\n\r\n    applyMove(state: CardGameState, move: CardGameMove): CardGameState {\r\n        if(move.type === \"end\"){\r\n            return this.applyEndMove(state);\r\n        }else if(move.type === \"play\"){\r\n            return this.applyCardPlay(state, move.cardNumber)\r\n        }else if(move.type === \"discard\"){\r\n            return this.applyCardDiscard(state, move.cardNumber)\r\n        }\r\n        throw new Error(\"Unknown move\")\r\n    }\r\n\r\n    getSensibleMoves(state: CardGameState): CardGameMove[] {\r\n        return [];\r\n    }\r\n\r\n    getStatus(state: CardGameState): GameStatus {\r\n        const p1Dead = state.playerOne.deck.length === 0 ||  state.playerOne.health <= 0;\r\n        const p2Dead = state.playerTwo.deck.length === 0 ||  state.playerTwo.health <= 0;\r\n        if(p1Dead && p2Dead) return GameStatus.DRAW;\r\n        if(p1Dead) return GameStatus.LOSE;\r\n        if(p2Dead) return GameStatus.WIN;\r\n        return GameStatus.IN_PLAY;\r\n    }\r\n\r\n    getValidMoves(state: CardGameState): CardGameMove[] {\r\n        if(state.step === 'draw'){\r\n            return this.getDiscardMoves(state);\r\n        }\r\n        return [{type:\"end\"}, ...this.getCardMoves(state)]\r\n    }\r\n\r\n    newGame(): CardGameState {\r\n        const newPlayer = {\r\n            hand:[],\r\n            health: 30,\r\n            discardPile:[],\r\n            board:[]\r\n        }\r\n        const preGame:CardGameState = {\r\n            activePlayer: 2, //Will flip when we run end turn logic\r\n            step: 'play', // Will also flip\r\n            playerOne:{\r\n                deck: this.deckOne,\r\n                ...newPlayer\r\n            },\r\n            playerTwo:{\r\n                deck: this.deckTwo,\r\n                ...newPlayer\r\n            }\r\n        };\r\n        return this.applyEndMove(preGame);\r\n    }\r\n\r\n    print( {playerOne, playerTwo, ...state}: CardGameState): void {\r\n        console.log(chalk.white(JSON.stringify(state,null,4)))\r\n        console.log(chalk.blue(JSON.stringify(playerOne,null,4)))\r\n        console.log(chalk.red(JSON.stringify(playerTwo,null,4)))\r\n    }\r\n\r\n    randomizeHiddenInfo(state: CardGameState): CardGameState {\r\n        const opponentKey = state.activePlayer === 1 ? 'playerTwo' : 'playerOne'\r\n\r\n        // Put their hand back into the deck, then draw up to the same number\r\n        const deck = [...state[opponentKey].deck, ...state[opponentKey].hand];\r\n        const hand = []\r\n        for(let i = 0; i < state[opponentKey].hand.length; i++){\r\n           const drawIndex = Math.floor(Math.random() * deck.length);\r\n            hand.push(...deck.splice(drawIndex, 1))\r\n        }\r\n\r\n        return {\r\n            ...state,\r\n            [opponentKey]:{\r\n                ...state[opponentKey],\r\n                hand,\r\n                deck\r\n            }\r\n        };\r\n    }\r\n\r\n    private getCardMoves(state: CardGameState):CardGamePlayCardMove[] {\r\n        const activePlayer = state.activePlayer === 1 ? state.playerOne : state.playerTwo;\r\n        return activePlayer.hand.map(cardNumber=>({type:\"play\", cardNumber}))\r\n    }\r\n   private getDiscardMoves(state: CardGameState):CardGameDiscardCardMove[] {\r\n        const activePlayer = state.activePlayer === 1 ? state.playerOne : state.playerTwo;\r\n        return activePlayer.hand.map(cardNumber=>({type:\"discard\", cardNumber}))\r\n    }\r\n\r\n    private applyEndMove(state: CardGameState):CardGameState {\r\n        const DRAW_UP_TO = 7;\r\n\r\n        const activePlayer = state.activePlayer === 1 ? 2 : 1;\r\n        const playerKey = activePlayer  === 1 ? 'playerOne' : 'playerTwo';\r\n        const player = state[playerKey];\r\n\r\n        const deck = [...player.deck];\r\n        const hand = [...player.hand];\r\n\r\n        while(hand.length < DRAW_UP_TO && deck.length > 0){\r\n            const drawIndex = Math.floor(Math.random() * deck.length);\r\n            hand.push(...deck.splice(drawIndex, 1))\r\n        }\r\n\r\n        const newPlayer:CardGamePlayerState = {\r\n            ...player,\r\n            deck,\r\n            hand\r\n        }\r\n\r\n        return {\r\n            ...state,\r\n            step: 'draw',\r\n            [playerKey]: newPlayer,\r\n            activePlayer,\r\n        }\r\n    }\r\n\r\n    private applyCardPlay(state: CardGameState, cardNumber: number):CardGameState {\r\n        const card = this.cardIndex[cardNumber];\r\n        return card.play(state, cardNumber)\r\n    }\r\n    private applyCardDiscard(state: CardGameState, cardNumber: number):CardGameState {\r\n        const playerKey = state.activePlayer  === 1 ? 'playerOne' : 'playerTwo';\r\n        const player = state[playerKey];\r\n\r\n        const hand = [...player.hand];\r\n        const discardPile = [...player.discardPile];\r\n        discardPile.push(...hand.splice(hand.indexOf(cardNumber), 1))\r\n        return {\r\n            ...state,\r\n            step: hand.length > HAND_SIZE ? 'draw' :'play',\r\n            [playerKey]:{\r\n                ...player,\r\n                hand,\r\n                discardPile\r\n            }\r\n        }\r\n    }\r\n\r\n    getHeuristic(state: CardGameState):number {\r\n        const bluePoints = Math.max(0, state.playerOne.health * state.playerOne.deck.length)\r\n        const redPoints = Math.max(0, state.playerTwo.health * state.playerTwo.deck.length)\r\n        if(bluePoints === redPoints) return 0;\r\n        return (bluePoints-redPoints)/(redPoints+bluePoints)\r\n    }\r\n}","import React, {CSSProperties, FunctionComponent} from \"react\";\r\nimport {Card} from \"../cardgame/Card\";\r\n\r\ntype CardProps = {\r\n    card:Card,\r\n    onClick:()=>void,\r\n    isOpponent:boolean;\r\n    beingPlayed:boolean;\r\n    canBeDiscarded:boolean;\r\n    canBePlayed:boolean;\r\n    isHidden:boolean;\r\n}\r\n\r\nconst CARD_STYLE:CSSProperties ={\r\n    position: \"relative\",\r\n    backgroundColor: 'white',\r\n    border: '1px solid black',\r\n    fontSize: 11,\r\n    borderRadius: 3,\r\n    width: 80,\r\n    height: 120,\r\n    margin: 5,\r\n    top:0,\r\n    display: 'inline-block',\r\n    transition: 'transform 0.3s, margin 0.35s ease-in 0.3s, top 0.4s ease-in-out 0.5s',\r\n    cursor: 'not-allowed',\r\n    overflow: 'hidden',\r\n    zIndex: 0,\r\n}\r\nconst CARD_TITLE_STYLE:CSSProperties ={\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n}\r\nconst BEING_PLAYED_CARD_STYLE = {\r\n    ...CARD_STYLE,\r\n    color: 'blue',\r\n    borderColor: 'black',\r\n    transform: \"scale(1.3)\",\r\n    marginLeft: -40,\r\n    marginRight: -40,\r\n    zIndex: 1,\r\n}\r\nconst CAN_BE_DISCADED_STYLE = {\r\n    ...CARD_STYLE,\r\n    borderColor: 'red',\r\n    borderWidth: 3,\r\n    cursor: 'pointer'\r\n}\r\nconst CAN_BE_PLAYED_STYLE = {\r\n    ...CARD_STYLE,\r\n    borderColor: 'blue',\r\n    borderWidth: 3,\r\n    cursor: 'pointer',\r\n}\r\n\r\nconst MOVE_DOWN_STYLE = {\r\n    top: 160,\r\n}\r\nconst MOVE_UP_STYLE = {\r\n    top: -160,\r\n}\r\n\r\nconst HIDDEN_STYLING = {\r\n    backgroundColor: 'darkgray',\r\n    color: 'darkgray',\r\n    transform: 'rotate3d(0,1,0,0.5turn)'\r\n}\r\n\r\nconst CardDisplay:FunctionComponent<CardProps> = (props)=>{\r\n    const {card, beingPlayed} = props;\r\n    const situationalStyle = props.canBeDiscarded ? CAN_BE_DISCADED_STYLE :\r\n                            props.canBePlayed ? CAN_BE_PLAYED_STYLE :\r\n                                {};\r\n    const positionStyling = (props.beingPlayed && props.isOpponent) ? MOVE_DOWN_STYLE :\r\n                            (props.beingPlayed && !props.isOpponent) ? MOVE_UP_STYLE :\r\n                                {};\r\n    const hiddenStyling = props.isHidden ? HIDDEN_STYLING : {}\r\n    const onClick = props.canBeDiscarded || props.canBePlayed ? props.onClick : ()=>{};\r\n    return <div style={{...beingPlayed ? BEING_PLAYED_CARD_STYLE : CARD_STYLE, ...situationalStyle, ...positionStyling, ...hiddenStyling}} onClick={onClick}>\r\n        <div style={CARD_TITLE_STYLE}>\r\n            {card.getName()}\r\n        </div>\r\n          <div>\r\n            {card.getText()}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default CardDisplay;","import {Card} from \"../cardgame/Card\";\r\nimport React, {CSSProperties} from \"react\";\r\nimport { usePopperTooltip } from \"react-popper-tooltip\";\r\nimport \"react-popper-tooltip/dist/styles.css\";\r\n\r\ntype CardPileProps = {\r\n    label: string,\r\n    cards:(Card|'?')[],\r\n}\r\n\r\nconst PILE_STYLE:CSSProperties = {\r\n    border: '1px solid black',\r\n    fontSize: 10,\r\n    borderRadius: 3,\r\n    width: 40,\r\n    height: 60,\r\n    margin: 5,\r\n    display: 'inline-block'\r\n}\r\nconst CARD_LIST_STYLE:CSSProperties = {\r\n    maxHeight: 200,\r\n    fontSize: 10,\r\n    textAlign: 'left',\r\n    width: 150,\r\n    overflowY: 'auto'\r\n}\r\n\r\nconst CardPile:React.FunctionComponent<CardPileProps> = props=>{\r\n    const {\r\n        label,\r\n        cards\r\n    } = props;\r\n        const {\r\n    getArrowProps,\r\n    getTooltipProps,\r\n    setTooltipRef,\r\n    setTriggerRef,\r\n    visible\r\n  } = usePopperTooltip({ interactive: true, delayHide: 100 });\r\n\r\n    return <>\r\n            <div style={PILE_STYLE} ref={setTriggerRef}>\r\n                {props.label}\r\n                <div>{cards.length}</div>\r\n            </div>\r\n         {visible && (\r\n          <div\r\n            ref={setTooltipRef}\r\n            {...getTooltipProps({ className: \"tooltip-container\" })}\r\n          >\r\n              {cards.length===0 && <i>Empty</i>}\r\n              <ul style={CARD_LIST_STYLE}>\r\n                  {cards.map(card=><li>\r\n                      <b>{typeof card === 'string' ? card : card.getName()}</b>\r\n                      {' '}\r\n                        {typeof card !== 'string' && card.getText()}\r\n                  </li>)}\r\n              </ul>\r\n            <div {...getArrowProps({ className: \"tooltip-arrow\" })} />\r\n          </div>\r\n        )}\r\n        </>\r\n}\r\n\r\nexport default CardPile;","import CardGame, {CardGameMove, CardGamePlayerState, CardGameState} from \"../cardgame/CardGame\";\r\nimport React, {CSSProperties, FunctionComponent, useEffect} from \"react\";\r\nimport CardDisplay  from \"./CardDisplay\";\r\n\r\nimport FlipMove from 'react-flip-move';\r\nimport CardPile from \"./CardPile\";\r\n\r\ntype GameBoardProps = {\r\n    gamestate: CardGameState;\r\n    game: CardGame,\r\n    lastmove: CardGameMove;\r\n    onCardClick: (n:number)=>void;\r\n}\r\ntype PlayerDisplayProps = {\r\n    isHidden: boolean;\r\n    isActive: boolean;\r\n    lastmove?: CardGameMove;\r\n    player: CardGamePlayerState;\r\n    gamestate: CardGameState;\r\n    game: CardGame;\r\n    onCardClick: (n:number)=>void;\r\n}\r\n\r\nconst WRAPPER_STYLE:CSSProperties = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    placeContent: 'center',\r\n}\r\n\r\nconst ACTIVE_WRAPPER_STYLE = {\r\n    ...WRAPPER_STYLE,\r\n    background: 'gold',\r\n}\r\n\r\nconst HAND_STYLE = {\r\n    display: 'inline-flex',\r\n    minWidth: 400,\r\n    justifyContent:'center'\r\n}\r\nconst HEALTH_WRAPPER_STYLE:CSSProperties = {\r\n    fontSize: 60,\r\n    position: \"relative\",\r\n}\r\nconst HEALTH_STYLE:CSSProperties = {\r\n    position: \"absolute\",\r\n    bottom:25,\r\n    left: 18,\r\n    width: 20,\r\n    fontSize: 16,\r\n    color: \"white\",\r\n    textAlign: 'center'\r\n}\r\n\r\nconst PlayerDisplay:FunctionComponent<PlayerDisplayProps> = ({onCardClick, game, player, isActive, isHidden, lastmove, gamestate})=>{\r\n    const [showingTempCards, setShowingTempCards] = React.useState(true)\r\n    const cardsBeingPlayed = lastmove && lastmove.type === 'play' ? [lastmove.cardNumber] : []\r\n\r\n\r\n    const displayHand = [...player.hand, ...cardsBeingPlayed].sort((a,b)=>a-b)\r\n\r\n    return <div style={isActive ? ACTIVE_WRAPPER_STYLE : WRAPPER_STYLE}>\r\n        <div style={HEALTH_WRAPPER_STYLE}>\r\n            ❤\r\n           <div style={HEALTH_STYLE}>\r\n            {player.health}\r\n        </div>\r\n        </div>\r\n        <FlipMove style={{...HAND_STYLE}}>\r\n            {displayHand.length === 0 &&  (<pre>(Empty Hand)</pre>)}\r\n            {displayHand.map(n=>(showingTempCards || !cardsBeingPlayed.includes(n)) && <div key={n}>\r\n                <CardDisplay\r\n                    onClick={()=>onCardClick(n)}\r\n                    isOpponent={isHidden}\r\n                    isHidden={isHidden && !cardsBeingPlayed.includes(n)}\r\n                    card={game.cardIndex[n]}\r\n                    canBePlayed={isActive && !isHidden && gamestate.step === 'play' && !cardsBeingPlayed.includes(n)}\r\n                    canBeDiscarded={isActive && !isHidden && gamestate.step === 'draw' && !cardsBeingPlayed.includes(n)}\r\n                    beingPlayed={cardsBeingPlayed.includes(n)}\r\n                />\r\n            </div>)}\r\n        </FlipMove>\r\n        <CardPile\r\n            label=\"deck\"\r\n            cards={player.deck.map(n=>isHidden ? '?' : game.cardIndex[n] )}\r\n        />\r\n        <CardPile\r\n            label=\"discard\"\r\n            cards={player.discardPile.map(n=>game.cardIndex[n])}\r\n        />\r\n    </div>\r\n}\r\n\r\nconst GameBoard:FunctionComponent<GameBoardProps> = (props)=>{\r\n    const {gamestate, game, lastmove, onCardClick} = props;\r\n    return <>\r\n        <div>\r\n            Step: {gamestate.step}\r\n        </div>\r\n        <PlayerDisplay onCardClick={()=>{}} game={game} gamestate={gamestate} player={gamestate.playerTwo} lastmove={gamestate.activePlayer === 2 ? lastmove: undefined} isActive={gamestate.activePlayer === 2} isHidden={true}/>\r\n        <div style={{height: \"50vh\"}}></div>\r\n        <PlayerDisplay onCardClick={onCardClick} game={game} gamestate={gamestate} player={gamestate.playerOne} lastmove={gamestate.activePlayer === 1 ? lastmove: undefined} isActive={gamestate.activePlayer === 1} isHidden={false}/>\r\n    </>\r\n}\r\n\r\nexport default GameBoard;","import React, {useMemo} from 'react';\nimport './App.css';\nimport {Card} from \"./cardgame/Card\";\nimport loadExampleDeck from \"./cardgame/Data/ExampleDecks\";\nimport CardGame, {CardGameMove, CardGameState} from \"./cardgame/CardGame\";\nimport {GameStatus, MCTSStrategy, MoveFromGame, RandomStrategy, StateFromGame, Strategy} from \"./MCTS/mcts\";\nimport GameBoard from \"./client/GameBoard\";\n\nfunction getMoveFromCardClick(gamestate:CardGameState, cardNumber:number):CardGameMove{\n    if(gamestate.step=='draw')return {type:'discard', cardNumber}\n    else return {type:'play', cardNumber}\n}\n\nfunction App() {\n  const cardIndex:Record<number, Card> = useMemo(()=>loadExampleDeck(), []);\n  const deck = useMemo(()=>Object.keys(cardIndex).map(n=>parseInt(n)), [cardIndex]);\n  const game = useMemo(()=>new CardGame(cardIndex, deck), [cardIndex, deck]);\n  const playerStrat:Strategy<StateFromGame<typeof game>, MoveFromGame<typeof game>> = new RandomStrategy()\n  const greedyStrat:Strategy<StateFromGame<typeof game>, MoveFromGame<typeof game>> = new MCTSStrategy(1,1,(gs)=>game.getHeuristic(gs));\n  const opponentStrat:Strategy<StateFromGame<typeof game>, MoveFromGame<typeof game>> = new MCTSStrategy(45,45,(gs)=>game.getHeuristic(gs), greedyStrat)\n  const [gamestate, setGamestate] = React.useState(game.newGame());\n  const status = useMemo(()=>game.getStatus(gamestate),[game, gamestate])\n\n  const [t, setT] = React.useState(NaN);\n  const [mood, setMood] = React.useState(opponentStrat.mood);\n  const [lastmove, setLastMove] = React.useState<CardGameMove>({type:\"end\"});\n\n  return (\n    <div className=\"App\">\n        {status !== GameStatus.IN_PLAY && <h1>{status}</h1>}\n      <GameBoard\n          gamestate={gamestate}\n          game={game}\n          lastmove={lastmove}\n          onCardClick={(n)=>{\n              if(status !== GameStatus.IN_PLAY)return;\n              const move = getMoveFromCardClick(gamestate,n)\n              const newState = game.applyMove(gamestate, move);\n              setGamestate(newState)\n              setLastMove(move)\n          }}\n      />\n      <button\n          disabled={status!==GameStatus.IN_PLAY || gamestate.activePlayer === 1}\n          onClick={()=>{\n              const t = performance.now()\n              const strat = (gamestate.activePlayer === 1 ? playerStrat : opponentStrat);\n              const move = strat.pickMove(game,gamestate)\n              setT(performance.now() - t)\n              const newState = game.applyMove(gamestate, move);\n              setGamestate(newState)\n              setMood(strat.mood)\n              setLastMove(move)\n          }}\n      >\n          step AI {t ? `(${t.toFixed(2)} ms)` : ''}\n      </button>\n\n      <button\n          disabled={status!==GameStatus.IN_PLAY || gamestate.activePlayer === 2 || !game.getValidMoves(gamestate).find(m=>m.type===\"end\")}\n          onClick={()=>{\n              const move:CardGameMove = {type:\"end\"}\n              const newState = game.applyMove(gamestate, move);\n              setGamestate(newState)\n              setLastMove(move)\n          }}\n      >\n         End Turn\n      </button>\n        <div>\n            {mood}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}